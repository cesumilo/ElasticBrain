{"version":3,"sources":["../src/common/abstractComponent.ts"],"names":[],"mappings":"AAAA;;;;;GAKG;;;AAEH,6BAA+B;AAE/B;;;GAGG;AACH;IAAsD,6CAAqB;IAMvE,2BAAY,KAAS,EAAE,OAAa;QAApC,YACI,kBAAM,KAAK,EAAE,OAAO,CAAC,SAExB;QAND,oGAAoG;QAC5F,gBAAU,GAAa,EAAE,CAAC;QA0BlC;;WAEG;QACI,mBAAa,GAAG;YACnB,EAAE,CAAC,CAAC,KAAI,CAAC,UAAU,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;gBAC7B,GAAG,CAAC,CAAoB,UAAe,EAAf,KAAA,KAAI,CAAC,UAAU,EAAf,cAAe,EAAf,IAAe;oBAAlC,IAAM,SAAS,SAAA;oBAChB,YAAY,CAAC,SAAS,CAAC,CAAC;iBAC3B;gBACD,KAAI,CAAC,UAAU,GAAG,EAAE,CAAC;YACzB,CAAC;QACL,CAAC,CAAA;QAhCG,KAAI,CAAC,aAAa,CAAC,KAAI,CAAC,KAAK,CAAC,CAAC;;IACnC,CAAC;IAEM,qDAAyB,GAAhC,UAAiC,SAA2C;QACxE,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC;IAClC,CAAC;IAEM,gDAAoB,GAA3B;QACI,IAAI,CAAC,aAAa,EAAE,CAAC;IACzB,CAAC;IAED;;;;OAIG;IACI,sCAAU,GAAjB,UAAkB,OAAiB,EAAE,OAAgB;QACjD,IAAM,MAAM,GAAG,UAAU,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;QAC5C,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAC7B,MAAM,CAAC,cAAM,OAAA,YAAY,CAAC,MAAM,CAAC,EAApB,CAAoB,CAAC;IACtC,CAAC;IAcF;;;;;;;;OAQG;IACQ,yCAAa,GAAvB,UAAwB,CAAmC;QACvD,wBAAwB;IAC5B,CAAC;IAAA,CAAC;IACN,wBAAC;AAAD,CAtDA,AAsDC,CAtDqD,KAAK,CAAC,SAAS,GAsDpE;AAtDqB,8CAAiB","file":"common/abstractComponent.js","sourcesContent":["/*\n * Copyright 2015 Palantir Technologies, Inc. All rights reserved.\n * Licensed under the BSD-3 License as modified (the “License”); you may obtain a copy\n * of the license at https://github.com/palantir/blueprint/blob/master/LICENSE\n * and https://github.com/palantir/blueprint/blob/master/PATENTS\n */\n\nimport * as React from \"react\";\n\n/**\n * An abstract component that Blueprint components can extend\n * in order to add some common functionality like runtime props validation.\n */\nexport abstract class AbstractComponent<P, S> extends React.Component<P, S> {\n    public displayName: string;\n\n    // Not bothering to remove entries when their timeouts finish because clearing invalid ID is a no-op\n    private timeoutIds: number[] = [];\n\n    constructor(props?: P, context?: any) {\n        super(props, context);\n        this.validateProps(this.props);\n    }\n\n    public componentWillReceiveProps(nextProps: P & {children?: React.ReactNode}) {\n        this.validateProps(nextProps);\n    }\n\n    public componentWillUnmount() {\n        this.clearTimeouts();\n    }\n\n    /**\n     * Set a timeout and remember its ID.\n     * All stored timeouts will be cleared when component unmounts.\n     * @returns a \"cancel\" function that will clear timeout when invoked.\n     */\n    public setTimeout(handler: Function, timeout?: number) {\n        const handle = setTimeout(handler, timeout);\n        this.timeoutIds.push(handle);\n        return () => clearTimeout(handle);\n    }\n\n    /**\n     * Clear all known timeouts.\n     */\n    public clearTimeouts = () => {\n        if (this.timeoutIds.length > 0) {\n            for (const timeoutId of this.timeoutIds) {\n                clearTimeout(timeoutId);\n            }\n            this.timeoutIds = [];\n        }\n    }\n\n   /**\n    * Ensures that the props specified for a component are valid.\n    * Implementations should check that props are valid and usually throw an Error if they are not.\n    * Implementations should not duplicate checks that the type system already guarantees.\n    *\n    * This method should be used instead of React's\n    * [propTypes](https://facebook.github.io/react/docs/reusable-components.html#prop-validation) feature.\n    * In contrast to propTypes, these runtime checks are _always_ run, not just in development mode.\n    */\n    protected validateProps(_: P & {children?: React.ReactNode}) {\n        // implement in subclass\n    };\n}\n"]}