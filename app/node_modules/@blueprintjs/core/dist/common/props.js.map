{"version":3,"sources":["../src/common/props.ts"],"names":[],"mappings":"AAAA;;;;;GAKG;;;AA2EH,0GAA0G;AAC1G,IAAM,aAAa,GAAG;IAClB,cAAc;IACd,sBAAsB;IACtB,YAAY;IACZ,UAAU;IACV,UAAU;IACV,QAAQ;IACR,SAAS;IACT,cAAc;IACd,iBAAiB;IACjB,UAAU;IACV,cAAc;IACd,eAAe;IACf,MAAM;CACT,CAAC;AAEF;;;;;;;GAOG;AACH,4BACI,KAA6B,EAC7B,YAA4B,EAC5B,WAAmB;IADnB,6BAAA,EAAA,4BAA4B;IAC5B,4BAAA,EAAA,mBAAmB;IAGnB,EAAE,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC;QACd,YAAY,GAAG,YAAY,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC;IACtD,CAAC;IAED,MAAM,CAAC,YAAY,CAAC,MAAM,CAAC,UAAC,IAAI,EAAE,IAAI;QAClC,EAAE,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAC5B,OAAQ,IAAY,CAAC,IAAI,CAAC,CAAC;QAC/B,CAAC;QACD,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC,uBAAO,KAAK,EAAG,CAAC;AACrB,CAAC;AAhBD,gDAgBC","file":"common/props.js","sourcesContent":["/*\n * Copyright 2015 Palantir Technologies, Inc. All rights reserved.\n * Licensed under the BSD-3 License as modified (the “License”); you may obtain a copy\n * of the license at https://github.com/palantir/blueprint/blob/master/LICENSE\n * and https://github.com/palantir/blueprint/blob/master/PATENTS\n */\n\nimport * as React from \"react\";\n\nimport { Intent } from \"./intent\";\n\nexport type HTMLInputProps = React.HTMLProps<HTMLInputElement>;\n\n/**\n * A shared base interface for all Blueprint component props.\n */\nexport interface IProps {\n    /** A space-delimited list of class names to pass along to a child element. */\n    className?: string;\n}\n\nexport interface IIntentProps {\n    /** Visual intent color to apply to element. */\n    intent?: Intent;\n}\n\n/**\n * Interface for a clickable action, such as a button or menu item.\n * These props can be spready directly to a `<Button>` or `<MenuItem>` element.\n */\nexport interface IActionProps extends IIntentProps, IProps {\n    /** Whether this action is non-interactive. */\n    disabled?: boolean;\n\n    /** Name of icon (the part after `pt-icon-`) to add to button. */\n    iconName?: string;\n\n    /** Click event handler. */\n    onClick?: (event: React.MouseEvent<HTMLElement>) => void;\n\n    /** Action text, required for usability. */\n    text?: string;\n}\n\n/** Interface for a link, with support for customizing target window. */\nexport interface ILinkProps {\n    /** Link URL. */\n    href?: string;\n\n    /** Link target attribute. Use \"_blank\" to open in a new window. */\n    target?: string;\n}\n\n/** Interface for a controlled input. */\nexport interface IControlledProps {\n    /** Initial value of the input, for uncontrolled usage. */\n    defaultValue?: string;\n\n    /** Change event handler. Use `event.target.value` for new value. */\n    onChange?: React.FormEventHandler<HTMLElement>;\n\n    /** Form value of the input, for controlled usage. */\n    value?: string;\n}\n\n/**\n * An interface for an option in a list, such as in a `<select>` or `RadioGroup`.\n * These props can be spread directly to an `<option>` or `<Radio>` element.\n */\nexport interface IOptionProps extends IProps {\n    /** Whether this option is non-interactive. */\n    disabled?: boolean;\n\n    /** Label text for this option. */\n    label: string;\n\n    /** Value of this option */\n    value: string;\n}\n\n/** A collection of curated prop keys used across our Components which are not valid HTMLElement props. */\nconst INVALID_PROPS = [\n    \"containerRef\",\n    \"defaultIndeterminate\",\n    \"elementRef\",\n    \"iconName\",\n    \"inputRef\",\n    \"intent\",\n    \"loading\",\n    \"leftIconName\",\n    \"onChildrenMount\",\n    \"onRemove\",\n    \"rightElement\",\n    \"rightIconName\",\n    \"text\",\n];\n\n/**\n * Typically applied to HTMLElements to filter out blacklisted props. When applied to a Component,\n * can filter props from being passed down to the children. Can also filter by a combined list of\n * supplied prop keys and the blacklist (only appropriate for HTMLElements).\n * @param props The original props object to filter down.\n * @param {string[]} invalidProps If supplied, overwrites the default blacklist.\n * @param {boolean} shouldMerge If true, will merge supplied invalidProps and blacklist together.\n */\nexport function removeNonHTMLProps(\n    props: { [key: string]: any },\n    invalidProps = INVALID_PROPS,\n    shouldMerge = false,\n): { [key: string]: any } {\n\n    if (shouldMerge) {\n        invalidProps = invalidProps.concat(INVALID_PROPS);\n    }\n\n    return invalidProps.reduce((prev, curr) => {\n        if (prev.hasOwnProperty(curr)) {\n            delete (prev as any)[curr];\n        }\n        return prev;\n    }, { ...props });\n}\n"]}