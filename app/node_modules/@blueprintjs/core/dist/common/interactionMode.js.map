{"version":3,"sources":["../src/common/interactionMode.ts"],"names":[],"mappings":"AAAA;;;;;GAKG;;AAEH,IAAM,YAAY,GAAG,CAAC,CAAC;AAEvB,0BAA0B;AAE1B;;;;GAIG;AACH;IAGI,+CAA+C;IAC/C,+BAAoB,SAAkB,EAAU,SAAiB;QAAjE,iBAAqE;QAAjD,cAAS,GAAT,SAAS,CAAS;QAAU,cAAS,GAAT,SAAS,CAAQ;QAHzD,cAAS,GAAG,KAAK,CAAC;QA4BlB,kBAAa,GAAG,UAAC,CAAgB;YACrC,EAAE,CAAC,CAAC,CAAC,CAAC,KAAK,KAAK,YAAY,CAAC,CAAC,CAAC;gBAC3B,KAAI,CAAC,KAAK,EAAE,CAAC;gBACb,KAAI,CAAC,SAAS,CAAC,gBAAgB,CAAC,WAAW,EAAE,KAAI,CAAC,eAAe,CAAC,CAAC;YACvE,CAAC;QACL,CAAC,CAAA;QAEO,oBAAe,GAAG;YACtB,KAAI,CAAC,KAAK,EAAE,CAAC;YACb,KAAI,CAAC,SAAS,CAAC,SAAS,CAAC,GAAG,CAAC,KAAI,CAAC,SAAS,CAAC,CAAC;YAC7C,KAAI,CAAC,SAAS,CAAC,gBAAgB,CAAC,SAAS,EAAE,KAAI,CAAC,aAAa,CAAC,CAAC;QACnE,CAAC,CAAA;IApCmE,CAAC;IAErE,uDAAuD;IAChD,wCAAQ,GAAf;QACI,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC;IAC1B,CAAC;IAED,4EAA4E;IACrE,qCAAK,GAAZ;QACI,IAAI,CAAC,SAAS,CAAC,gBAAgB,CAAC,WAAW,EAAE,IAAI,CAAC,eAAe,CAAC,CAAC;QACnE,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;IAC1B,CAAC;IAED,6EAA6E;IACtE,oCAAI,GAAX;QACI,IAAI,CAAC,KAAK,EAAE,CAAC;QACb,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;IAC3B,CAAC;IAEO,qCAAK,GAAb;QACI,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QAChD,IAAI,CAAC,SAAS,CAAC,mBAAmB,CAAC,SAAS,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;QAClE,IAAI,CAAC,SAAS,CAAC,mBAAmB,CAAC,WAAW,EAAE,IAAI,CAAC,eAAe,CAAC,CAAC;IAC1E,CAAC;IAcL,4BAAC;AAAD,CAzCA,AAyCC,IAAA;AAzCY,sDAAqB","file":"common/interactionMode.js","sourcesContent":["/*\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n * Licensed under the BSD-3 License as modified (the “License”); you may obtain a copy\n * of the license at https://github.com/palantir/blueprint/blob/master/LICENSE\n * and https://github.com/palantir/blueprint/blob/master/PATENTS\n */\n\nconst TAB_KEY_CODE = 9;\n\n/* istanbul ignore next */\n\n/**\n * A nifty little class that maintains event handlers to add a class to the container element\n * when entering \"mouse mode\" (on a `mousedown` event) and remove it when entering \"keyboard mode\"\n * (on a `tab` key `keydown` event).\n */\nexport class InteractionModeEngine {\n    private isRunning = false;\n\n    // tslint:disable-next-line:no-constructor-vars\n    constructor(private container: Element, private className: string) {}\n\n    /** Returns whether the engine is currently running. */\n    public isActive() {\n        return this.isRunning;\n    }\n\n    /** Enable behavior which applies the given className when in mouse mode. */\n    public start() {\n        this.container.addEventListener(\"mousedown\", this.handleMouseDown);\n        this.isRunning = true;\n    }\n\n    /** Disable interaction mode behavior and remove className from container. */\n    public stop() {\n        this.reset();\n        this.isRunning = false;\n    }\n\n    private reset() {\n        this.container.classList.remove(this.className);\n        this.container.removeEventListener(\"keydown\", this.handleKeyDown);\n        this.container.removeEventListener(\"mousedown\", this.handleMouseDown);\n    }\n\n    private handleKeyDown = (e: KeyboardEvent) => {\n        if (e.which === TAB_KEY_CODE) {\n            this.reset();\n            this.container.addEventListener(\"mousedown\", this.handleMouseDown);\n        }\n    }\n\n    private handleMouseDown = () => {\n        this.reset();\n        this.container.classList.add(this.className);\n        this.container.addEventListener(\"keydown\", this.handleKeyDown);\n    }\n}\n"]}