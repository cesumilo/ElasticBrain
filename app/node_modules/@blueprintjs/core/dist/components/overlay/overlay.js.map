{"version":3,"sources":["../src/components/overlay/overlay.tsx"],"names":[],"mappings":"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","file":"components/overlay/overlay.js","sourcesContent":["/*\n * Copyright 2015 Palantir Technologies, Inc. All rights reserved.\n * Licensed under the BSD-3 License as modified (the “License”); you may obtain a copy\n * of the license at https://github.com/palantir/blueprint/blob/master/LICENSE\n * and https://github.com/palantir/blueprint/blob/master/PATENTS\n */\n\nimport * as classNames from \"classnames\";\nimport * as PureRender from \"pure-render-decorator\";\nimport * as React from \"react\";\nimport * as CSSTransitionGroup from \"react-addons-css-transition-group\";\n\nimport * as Classes from \"../../common/classes\";\nimport * as Keys from \"../../common/keys\";\nimport { IProps } from \"../../common/props\";\nimport { safeInvoke } from \"../../common/utils\";\nimport { Portal } from \"../portal/portal\";\n\nexport interface IOverlayableProps {\n    /**\n     * Whether the overlay should acquire application focus when it first opens.\n     * @default true\n     */\n    autoFocus?: boolean;\n\n    /**\n     * Whether pressing the `esc` key should invoke `onClose`.\n     * @default true\n     */\n    canEscapeKeyClose?: boolean;\n\n    /**\n     * Whether the overlay should prevent focus from leaving itself. That is, if the user attempts\n     * to focus an element outside the overlay and this prop is enabled, then the overlay will\n     * immediately bring focus back to itself. If you are nesting overlay components, either disable\n     * this prop on the \"outermost\" overlays or mark the nested ones `inline={true}`.\n     * @default true\n     */\n    enforceFocus?: boolean;\n\n    /**\n     * Whether the overlay should be rendered inline or into a new element on `document.body`.\n     * This prop essentially determines which element is covered by the backdrop: if `true`,\n     * then only its parent is covered; otherwise, the entire application is covered.\n     * Set this prop to true when this component is used inside an `Overlay` (such as\n     * `Dialog` or `Popover`) to ensure that this component is rendered above its parent.\n     * @default false\n     */\n    inline?: boolean;\n\n    /**\n     * If `true` and not `inline`, the `Portal` containing the children is created and attached\n     * to the DOM when the overlay is opened for the first time; otherwise this happens when the\n     * component mounts. Lazy mounting provides noticeable performance improvements if you have lots\n     * of overlays at once, such as on each row of a table.\n     * @default true\n     */\n    lazy?: boolean;\n\n    /**\n     * Indicates how long (in milliseconds) the overlay's enter/leave transition takes.\n     * This is used by React `CSSTransitionGroup` to know when a transition completes and must match\n     * the duration of the animation in CSS. Only set this prop if you override Blueprint's default\n     * transitions with new transitions of a different length.\n     * @default 100\n     */\n    transitionDuration?: number;\n\n    /**\n     * A callback that is invoked when user interaction causes the overlay to close, such as\n     * clicking on the overlay or pressing the `esc` key (if enabled).\n     * Receives the event from the user's interaction, if there was an event (generally either a\n     * mouse or key event). Note that, since this component is controlled by the `isOpen` prop, it\n     * will not actually close itself until that prop becomes `false`.\n     */\n    onClose?(event?: React.SyntheticEvent<HTMLElement>): void;\n}\n\nexport interface IBackdropProps {\n    /** CSS class names to apply to backdrop element. */\n    backdropClassName?: string;\n\n    /** HTML props for the backdrop element. */\n    backdropProps?: React.HTMLProps<HTMLDivElement>;\n\n    /**\n     * Whether clicking outside the overlay element (either on backdrop when present or on document)\n     * should invoke `onClose`.\n     * @default true\n     */\n    canOutsideClickClose?: boolean;\n\n    /**\n     * Whether a container-spanning backdrop element should be rendered behind the contents.\n     * @default true\n     */\n    hasBackdrop?: boolean;\n}\n\nexport interface IOverlayProps extends IOverlayableProps, IBackdropProps, IProps {\n    /** Lifecycle callback invoked after the overlay opens and is mounted in the DOM. */\n    didOpen?: () => any;\n\n    /**\n     * Toggles the visibility of the overlay and its children.\n     * This prop is required because the component is controlled.\n     */\n    isOpen: boolean;\n\n    /**\n     * Name of the transition for internal `CSSTransitionGroup`.\n     * Providing your own name here will require defining new CSS transition properties.\n     * @default \"pt-overlay\"\n     */\n    transitionName?: string;\n}\n\nexport interface IOverlayState {\n    hasEverOpened?: boolean;\n}\n\n@PureRender\nexport class Overlay extends React.Component<IOverlayProps, IOverlayState> {\n    public static defaultProps: IOverlayProps = {\n        autoFocus: true,\n        backdropProps: {},\n        canEscapeKeyClose: true,\n        canOutsideClickClose: true,\n        enforceFocus: true,\n        hasBackdrop: true,\n        inline: false,\n        isOpen: false,\n        lazy: true,\n        transitionDuration: 300,\n        transitionName: \"pt-overlay\",\n    };\n\n    private static openStack: Overlay[] = [];\n    private static getLastOpened = () => Overlay.openStack[Overlay.openStack.length - 1];\n\n    public displayName = \"Blueprint.Overlay\";\n\n    // an HTMLElement that contains the backdrop and any children, to query for focus target\n    private containerElement: HTMLElement;\n    private refHandlers = {\n        container: (ref: HTMLDivElement) => this.containerElement = ref,\n    };\n\n    public constructor(props?: IOverlayProps, context?: any) {\n        super(props, context);\n        this.state = { hasEverOpened: props.isOpen };\n    }\n\n    public render() {\n        // oh snap! no reason to render anything at all if we're being truly lazy\n        if (this.props.lazy && !this.state.hasEverOpened) {\n            return null;\n        }\n\n        const { children, className, inline, isOpen, transitionDuration, transitionName } = this.props;\n\n        // add a special class to each child that will automatically set the appropriate\n        // CSS position mode under the hood. also, make the container focusable so we can\n        // trap focus inside it (via `enforceFocus`).\n        const decoratedChildren = React.Children.map(children, (child: React.ReactElement<any>) => {\n            return React.cloneElement(child, {\n                className: classNames(child.props.className, Classes.OVERLAY_CONTENT),\n                tabIndex: 0,\n            });\n        });\n\n        const transitionGroup = (\n            <CSSTransitionGroup\n                transitionAppear={true}\n                transitionAppearTimeout={transitionDuration}\n                transitionEnterTimeout={transitionDuration}\n                transitionLeaveTimeout={transitionDuration}\n                transitionName={transitionName}\n            >\n                {this.maybeRenderBackdrop()}\n                {isOpen ? decoratedChildren : null}\n            </CSSTransitionGroup>\n        );\n\n        const mergedClassName = classNames(Classes.OVERLAY, {\n            [Classes.OVERLAY_OPEN]: isOpen,\n            [Classes.OVERLAY_INLINE]: inline,\n        }, className);\n\n        const elementProps = {\n            className: mergedClassName,\n            onKeyDown: this.handleKeyDown,\n        };\n\n        if (inline) {\n            return <span {...elementProps} ref={this.refHandlers.container}>{transitionGroup}</span>;\n        } else {\n            return (\n                <Portal\n                    {...elementProps}\n                    containerRef={this.refHandlers.container}\n                    onChildrenMount={this.handleContentMount}\n                >\n                    {transitionGroup}\n                </Portal>\n            );\n        }\n    }\n\n    public componentDidMount() {\n        if (this.props.isOpen) {\n            this.overlayWillOpen();\n        }\n    }\n\n    public componentWillReceiveProps(nextProps: IOverlayProps) {\n        this.setState({ hasEverOpened: this.state.hasEverOpened || nextProps.isOpen });\n    }\n\n    public componentDidUpdate(prevProps: IOverlayProps) {\n        if (prevProps.isOpen && !this.props.isOpen) {\n            this.overlayWillClose();\n        } else if (!prevProps.isOpen && this.props.isOpen) {\n            this.overlayWillOpen();\n        }\n    }\n\n    public componentWillUnmount() {\n        this.overlayWillClose();\n    }\n\n    private maybeRenderBackdrop() {\n        const { backdropClassName, backdropProps, hasBackdrop, isOpen } = this.props;\n        if (hasBackdrop && isOpen) {\n            return (\n                <div\n                    {...backdropProps}\n                    className={classNames(Classes.OVERLAY_BACKDROP, backdropClassName, backdropProps.className)}\n                    onMouseDown={this.handleBackdropMouseDown}\n                    tabIndex={this.props.canOutsideClickClose ? 0 : null}\n                />\n            );\n        } else {\n            return undefined;\n        }\n    }\n\n    private overlayWillClose() {\n        document.removeEventListener(\"focus\", this.handleDocumentFocus, /* useCapture */ true);\n        document.removeEventListener(\"mousedown\", this.handleDocumentClick);\n\n        document.body.classList.remove(Classes.OVERLAY_OPEN);\n\n        const { openStack } = Overlay;\n        const idx = openStack.indexOf(this);\n        if (idx > 0) {\n            openStack.splice(idx, 1);\n            const lastOpenedOverlay = Overlay.getLastOpened();\n            if (openStack.length > 0 && lastOpenedOverlay.props.enforceFocus) {\n                document.addEventListener(\"focus\", lastOpenedOverlay.handleDocumentFocus, /* useCapture */ true);\n            }\n        }\n    }\n\n    private overlayWillOpen() {\n        const { openStack } = Overlay;\n        if (openStack.length > 0) {\n            document.removeEventListener(\"focus\", Overlay.getLastOpened().handleDocumentFocus, /* useCapture */ true);\n        }\n        openStack.push(this);\n\n        if (this.props.canOutsideClickClose && !this.props.hasBackdrop) {\n            document.addEventListener(\"mousedown\", this.handleDocumentClick);\n        }\n        if (this.props.enforceFocus) {\n            document.addEventListener(\"focus\", this.handleDocumentFocus, /* useCapture */ true);\n        }\n        if (this.props.inline) {\n            safeInvoke(this.props.didOpen);\n            if (this.props.autoFocus) {\n                this.bringFocusInsideOverlay();\n            }\n        } else if (this.props.hasBackdrop) {\n            // add a class to the body to prevent scrolling of content below the overlay\n            document.body.classList.add(Classes.OVERLAY_OPEN);\n        }\n    }\n\n    private bringFocusInsideOverlay = () => {\n        const { containerElement } = this;\n\n        // container ref may be undefined between component mounting and Portal rendering\n        // activeElement may be undefined in some rare cases in IE\n        if (containerElement == null || document.activeElement == null || !this.props.isOpen) {\n            return;\n        }\n\n        const isFocusOutsideModal = !containerElement.contains(document.activeElement);\n        if (isFocusOutsideModal) {\n            // element marked autofocus has higher priority than the other clowns\n            const autofocusElement = containerElement.query(\"[autofocus]\") as HTMLElement;\n            const wrapperElement = containerElement.query(\"[tabindex]\") as HTMLElement;\n            if (autofocusElement != null) {\n                autofocusElement.focus();\n            } else if (wrapperElement != null) {\n                wrapperElement.focus();\n            }\n        }\n    }\n\n    private handleBackdropMouseDown = (e: React.MouseEvent<HTMLDivElement>) => {\n        if (this.props.canOutsideClickClose) {\n            safeInvoke(this.props.onClose, e);\n        }\n        safeInvoke(this.props.backdropProps.onMouseDown, e);\n    }\n\n    private handleDocumentClick = (e: MouseEvent) => {\n        const { isOpen, onClose } = this.props;\n        const eventTarget = e.target as HTMLElement;\n        const isClickInOverlay = this.containerElement != null\n            && this.containerElement.contains(eventTarget);\n        if (isOpen && this.props.canOutsideClickClose && !isClickInOverlay) {\n            // casting to any because this is a native event\n            safeInvoke(onClose, e as any);\n        }\n    }\n\n    private handleContentMount = () => {\n        if (this.props.isOpen) {\n            safeInvoke(this.props.didOpen);\n        }\n        if (this.props.autoFocus) {\n            this.bringFocusInsideOverlay();\n        }\n    }\n\n    private handleDocumentFocus = (e: FocusEvent) => {\n        if (this.props.enforceFocus\n                && this.containerElement != null\n                && !this.containerElement.contains(e.target as HTMLElement)) {\n            e.stopImmediatePropagation();\n            this.bringFocusInsideOverlay();\n        }\n    }\n\n    private handleKeyDown = (e: React.KeyboardEvent<HTMLElement>) => {\n        const { canEscapeKeyClose, onClose } = this.props;\n        if (e.which === Keys.ESCAPE && canEscapeKeyClose) {\n            safeInvoke(onClose, e);\n            // prevent browser-specific escape key behavior (Safari exits fullscreen)\n            e.preventDefault();\n        }\n    }\n}\n\nexport const OverlayFactory = React.createFactory(Overlay);\n"]}