{"version":3,"sources":["../src/components/tooltip/tooltip.tsx"],"names":[],"mappings":"AAAA;;;;;GAKG;;;AAEH,uCAAyC;AACzC,kDAAoD;AACpD,6BAA+B;AAE/B,8CAAgD;AAChD,kDAAiD;AAIjD,8CAAqE;AA8GrE,IAAa,OAAO;IAAS,mCAAkC;IAD/D;QAAA,qEAsCC;QAtBU,iBAAW,GAAG,mBAAmB,CAAC;;IAsB7C,CAAC;IApBU,wBAAM,GAAb;QACU,IAAA,eAAmD,EAAjD,sBAAQ,EAAE,kBAAM,EAAE,sCAAgB,CAAgB;QAC1D,IAAM,OAAO,GAAG,UAAU,CAAC,OAAO,CAAC,OAAO,EAAE,OAAO,CAAC,WAAW,CAAC,MAAM,CAAC,EAAE,gBAAgB,CAAC,CAAC;QAE3F,MAAM,CAAC,CACH,oBAAC,iBAAO,uBACA,IAAI,CAAC,KAAK,IACd,SAAS,EAAE,EAAE,EACb,SAAS,EAAE,KAAK,EAChB,iBAAiB,EAAE,KAAK,EACxB,YAAY,EAAE,KAAK,EACnB,eAAe,EAAE,gCAAsB,CAAC,iBAAiB,EACzD,IAAI,EAAE,IAAI,EACV,gBAAgB,EAAE,OAAO,EACzB,kBAAkB,EAAE,GAAG,KAEtB,QAAQ,CACH,CACb,CAAC;IACN,CAAC;IACL,cAAC;AAAD,CArCA,AAqCC,CArC4B,KAAK,CAAC,SAAS,GAqC3C;AApCiB,oBAAY,GAAkB;IACxC,SAAS,EAAE,EAAE;IACb,OAAO,EAAE,EAAE;IACX,eAAe,EAAE,CAAC;IAClB,cAAc,EAAE,GAAG;IACnB,UAAU,EAAE,KAAK;IACjB,QAAQ,EAAE,mBAAQ,CAAC,GAAG;IACtB,cAAc,EAAE,MAAM;IACtB,gBAAgB,EAAE,EAAE;IACpB,kBAAkB,EAAE,GAAG;IACvB,wBAAwB,EAAE,IAAI;IAC9B,mBAAmB,EAAE,KAAK;CAC7B,CAAC;AAbO,OAAO;IADnB,UAAU;GACE,OAAO,CAqCnB;AArCY,0BAAO;AAuCP,QAAA,cAAc,GAAG,KAAK,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC","file":"components/tooltip/tooltip.js","sourcesContent":["/*\n * Copyright 2015 Palantir Technologies, Inc. All rights reserved.\n * Licensed under the BSD-3 License as modified (the “License”); you may obtain a copy\n * of the license at https://github.com/palantir/blueprint/blob/master/LICENSE\n * and https://github.com/palantir/blueprint/blob/master/PATENTS\n */\n\nimport * as classNames from \"classnames\";\nimport * as PureRender from \"pure-render-decorator\";\nimport * as React from \"react\";\n\nimport * as Classes from \"../../common/classes\";\nimport { Position } from \"../../common/position\";\nimport { IIntentProps, IProps } from \"../../common/props\";\nimport { ITetherConstraint } from \"../../common/tetherUtils\";\n\nimport { Popover, PopoverInteractionKind } from \"../popover/popover\";\n\nexport interface ITooltipProps extends IProps, IIntentProps {\n    /**\n     * The content that will be displayed inside of the tooltip.\n     */\n    content: JSX.Element | string;\n\n    /**\n     * Constraints for the underlying Tether instance.\n     * @see http://github.hubspot.com/tether/#constraints\n     */\n    constraints?: ITetherConstraint[];\n\n    /**\n     * Whether the tooltip is initially open.\n     * @default false\n     */\n    defaultIsOpen?: boolean;\n\n    /**\n     * The amount of time in milliseconds the tooltip should remain open after the\n     * user hovers off the trigger. The timer is canceled if the user mouses over the\n     * target before it expires.\n     * @default 0\n     */\n    hoverCloseDelay?: number;\n\n    /**\n     * The amount of time in milliseconds the tooltip should wait before opening after the\n     * user hovers over the trigger. The timer is canceled if the user mouses away from the\n     * target before it expires.\n     * @default 150\n     */\n    hoverOpenDelay?: number;\n\n    /**\n     * Whether the tooltip is rendered inline (as a sibling of the target element).\n     * If false, it is attached to a new element appended to `<body>`.\n     * @default false\n     */\n    inline?: boolean;\n\n    /**\n     * Prevents the tooltip from appearing when `true`.\n     * @default false\n     */\n    isDisabled?: boolean;\n\n    /**\n     * Whether or not the tooltip is visible. Passing this property will put the tooltip in\n     * controlled mode, where the only way to change visibility is by updating this property.\n     * @default undefined\n     */\n    isOpen?: boolean;\n\n    /**\n     * Callback invoked in controlled mode when the tooltip open state *would* change due to\n     * user interaction.\n     */\n    onInteraction?: (nextOpenState: boolean) => void;\n\n    /**\n     * Space-delimited string of class names applied to the\n     * portal which holds the tooltip if `inline = false`.\n     */\n    portalClassName?: string;\n\n    /**\n     * The position (relative to the target) at which the tooltip should appear.\n     * @default Position.TOP\n     */\n    position?: Position;\n\n    /**\n     * The name of the HTML tag to use when rendering the tooltip target wrapper element.\n     * @default \"span\"\n     */\n    rootElementTag?: string;\n\n    /**\n     * A space-delimited string of class names that are applied to the tooltip (but not the target).\n     */\n    tooltipClassName?: string;\n\n    /**\n     * Indicates how long (in milliseconds) the tooltip's appear/disappear transition takes.\n     * This is used by React `CSSTransitionGroup` to know when a transition completes\n     * and must match the duration of the animation in CSS.\n     * Only set this prop if you override Blueprint's default transitions with new transitions of a different length.\n     * @default 100\n     */\n    transitionDuration?: number;\n\n    /**\n     * Whether the arrow's offset should be computed such that it always points at the center\n     * of the target. If false, arrow position is hardcoded via CSS, which expects a 30px target.\n     * @default true\n     */\n    useSmartArrowPositioning?: boolean;\n\n    /**\n     * Whether the tooltip will try to reposition itself\n     * if there isn't room for it in its current position.\n     * @default false\n     */\n    useSmartPositioning?: boolean;\n}\n\n@PureRender\nexport class Tooltip extends React.Component<ITooltipProps, {}> {\n    public static defaultProps: ITooltipProps = {\n        className: \"\",\n        content: \"\",\n        hoverCloseDelay: 0,\n        hoverOpenDelay: 150,\n        isDisabled: false,\n        position: Position.TOP,\n        rootElementTag: \"span\",\n        tooltipClassName: \"\",\n        transitionDuration: 100,\n        useSmartArrowPositioning: true,\n        useSmartPositioning: false,\n    };\n\n    public displayName = \"Blueprint.Tooltip\";\n\n    public render(): JSX.Element {\n        const { children, intent, tooltipClassName } = this.props;\n        const classes = classNames(Classes.TOOLTIP, Classes.intentClass(intent), tooltipClassName);\n\n        return (\n            <Popover\n                {...this.props}\n                arrowSize={22}\n                autoFocus={false}\n                canEscapeKeyClose={false}\n                enforceFocus={false}\n                interactionKind={PopoverInteractionKind.HOVER_TARGET_ONLY}\n                lazy={true}\n                popoverClassName={classes}\n                transitionDuration={200}\n            >\n                {children}\n            </Popover>\n        );\n    }\n}\n\nexport const TooltipFactory = React.createFactory(Tooltip);\n"]}