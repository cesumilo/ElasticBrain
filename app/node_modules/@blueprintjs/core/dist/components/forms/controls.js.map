{"version":3,"sources":["../src/components/forms/controls.tsx"],"names":[],"mappings":"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","file":"components/forms/controls.js","sourcesContent":["/*\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n * Licensed under the BSD-3 License as modified (the “License”); you may obtain a copy\n * of the license at https://github.com/palantir/blueprint/blob/master/LICENSE\n * and https://github.com/palantir/blueprint/blob/master/PATENTS\n */\n\n// HACKHACK: these components should go in separate files\n// tslint:disable max-classes-per-file\n\nimport * as classNames from \"classnames\";\nimport * as React from \"react\";\n\nimport * as Classes from \"../../common/classes\";\nimport { IProps, removeNonHTMLProps } from \"../../common/props\";\nimport { safeInvoke } from \"../../common/utils\";\n\nexport interface IControlProps extends IProps {\n    /** Whether the control is checked. */\n    checked?: boolean;\n\n    /** Whether the control is initially checked (uncontrolled) */\n    defaultChecked?: boolean;\n\n    /** Whether the control is non-interactive. */\n    disabled?: boolean;\n\n    /** Ref handler that receives HTML `<input>` element backing this component. */\n    inputRef?: (ref: HTMLInputElement) => any;\n\n    /** Text label for control. */\n    label?: string;\n\n    /** Event handler invoked when input value is changed */\n    onChange?: React.FormEventHandler<HTMLInputElement>;\n}\n\n/** Base Component class for all Controls */\nexport class Control<P extends IControlProps> extends React.Component<React.HTMLProps<HTMLInputElement> & P, {}> {\n    // generates control markup for given input type.\n    // optional inputRef in case the component needs reference for itself (don't forget to invoke the prop!).\n    protected renderControl(type: \"checkbox\" | \"radio\", typeClassName: string, inputRef = this.props.inputRef) {\n        const className = classNames(\n            Classes.CONTROL,\n            typeClassName,\n            { [Classes.DISABLED]: this.props.disabled },\n            this.props.className,\n        );\n        return (\n            <label className={className} style={this.props.style}>\n                <input\n                    {...removeNonHTMLProps(this.props, [\"children\", \"indeterminate\"], true)}\n                    ref={inputRef}\n                    type={type}\n                />\n                <span className={Classes.CONTROL_INDICATOR} />\n                {this.props.label}\n                {this.props.children}\n            </label>\n        );\n    }\n}\n\nexport interface ICheckboxProps extends IControlProps {\n    /** Whether this checkbox is initially indeterminate (uncontrolled) */\n    defaultIndeterminate?: boolean;\n\n    /** Whether this checkbox is indeterminate */\n    indeterminate?: boolean;\n}\n\nexport class Checkbox extends Control<ICheckboxProps> {\n    public static displayName = \"Blueprint.Checkbox\";\n\n    // must maintain internal reference for `indeterminate` support\n    private input: HTMLInputElement;\n\n    public render() {\n        return this.renderControl(\"checkbox\", \"pt-checkbox\", this.handleInputRef);\n    }\n\n    public componentDidMount() {\n        if (this.props.defaultIndeterminate != null) {\n            this.input.indeterminate = this.props.defaultIndeterminate;\n        }\n        this.updateIndeterminate();\n    }\n\n    public componentDidUpdate() {\n        this.updateIndeterminate();\n    }\n\n    private updateIndeterminate() {\n        if (this.props.indeterminate != null) {\n            this.input.indeterminate = this.props.indeterminate;\n        }\n    }\n\n    private handleInputRef = (ref: HTMLInputElement) => {\n        this.input = ref;\n        safeInvoke(this.props.inputRef, ref);\n    }\n}\n\nexport interface ISwitchProps extends IControlProps {}\n\nexport class Switch extends Control<ISwitchProps> {\n    public static displayName = \"Blueprint.Switch\";\n\n    public render() {\n        return this.renderControl(\"checkbox\", \"pt-switch\");\n    }\n}\n\nexport interface IRadioProps extends IControlProps {}\n\nexport class Radio extends Control<IRadioProps> {\n    public static displayName = \"Blueprint.Radio\";\n\n    public render() {\n        return this.renderControl(\"radio\", \"pt-radio\");\n    }\n}\n\nexport const CheckboxFactory = React.createFactory(Checkbox);\nexport const SwitchFactory = React.createFactory(Switch);\nexport const RadioFactory = React.createFactory(Radio);\n"]}