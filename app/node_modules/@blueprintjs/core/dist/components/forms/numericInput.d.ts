import * as React from "react";
import { AbstractComponent, HTMLInputProps, IIntentProps, IProps, Position } from "../../common";
export interface INumericInputProps extends IIntentProps, IProps {
    /**
     * The position of the buttons with respect to the input field.
     * @default Position.RIGHT
     */
    buttonPosition?: Position.LEFT | Position.RIGHT | "none";
    /**
     * Whether the input is in a non-interactive state.
     * @default false
     */
    disabled?: boolean;
    /** The name of icon (the part after `pt-icon-`) to render on left side of input. */
    leftIconName?: string;
    /** The placeholder text in the absence of any value. */
    placeholder?: string;
    /**
     * The increment between successive values when `shift` is held.
     * @default 10
     */
    majorStepSize?: number;
    /** The maximum value of the input. */
    max?: number;
    /** The minimum value of the input. */
    min?: number;
    /**
     * The increment between successive values when `alt` is held.
     * @default 0.1
     */
    minorStepSize?: number;
    /**
     * The increment between successive values when no modifier keys are held.
     * @default 1
     */
    stepSize?: number;
    /** The value to display in the input field. */
    value?: number | string;
    /** The callback invoked when the value changes. */
    onValueChange?(valueAsNumber: number, valueAsString: string): void;
}
export interface INumericInputState {
    isInputGroupFocused?: boolean;
    isButtonGroupFocused?: boolean;
    shouldSelectAfterUpdate?: boolean;
    value?: string;
}
export declare class NumericInput extends AbstractComponent<HTMLInputProps & INumericInputProps, INumericInputState> {
    static displayName: string;
    static defaultProps: INumericInputProps;
    private static DECREMENT_KEY;
    private static INCREMENT_KEY;
    private static DECREMENT_ICON_NAME;
    private static INCREMENT_ICON_NAME;
    private static VALUE_EMPTY;
    private static VALUE_ZERO;
    private inputElement;
    constructor(props?: HTMLInputProps & INumericInputProps, context?: any);
    componentWillReceiveProps(nextProps: HTMLInputProps & INumericInputProps): void;
    render(): JSX.Element;
    componentDidUpdate(): void;
    protected validateProps(nextProps: HTMLInputProps & INumericInputProps): void;
    private renderButton(key, iconName, onClick);
    private inputRef;
    private handleDecrementButtonClick;
    private handleIncrementButtonClick;
    private handleButtonFocus;
    private handleButtonBlur;
    private handleButtonKeyUp;
    private handleInputFocus;
    private handleInputBlur;
    private handleInputKeyDown;
    private handleInputChange;
    private invokeOnChangeCallbacks(value);
    private incrementValue(delta);
    private getIncrementDelta(direction, isShiftKeyPressed, isAltKeyPressed);
    private getSanitizedValue(value, delta, min, max);
    private getValueOrEmptyValue(value);
    private isValueNumeric(value);
}
export declare const NumericInputFactory: React.ComponentFactory<React.HTMLProps<HTMLInputElement> & INumericInputProps & {
    children?: React.ReactNode;
}, NumericInput>;
