{"version":3,"sources":["../src/components/forms/inputGroup.tsx"],"names":[],"mappings":"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","file":"components/forms/inputGroup.js","sourcesContent":["/*\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n * Licensed under the BSD-3 License as modified (the “License”); you may obtain a copy\n * of the license at https://github.com/palantir/blueprint/blob/master/LICENSE\n * and https://github.com/palantir/blueprint/blob/master/PATENTS\n */\n\nimport * as classNames from \"classnames\";\nimport * as PureRender from \"pure-render-decorator\";\nimport * as React from \"react\";\n\nimport * as Classes from \"../../common/classes\";\nimport { HTMLInputProps, IControlledProps, IIntentProps, IProps, removeNonHTMLProps } from \"../../common/props\";\n\nexport interface IInputGroupProps extends IControlledProps, IIntentProps, IProps {\n    /**\n     * Whether the input is non-interactive.\n     * Note that `rightElement` must be disabled separately; this prop will not affect it.\n     * @default false\n     */\n    disabled?: boolean;\n\n    /** Ref handler that receives HTML `<input>` element backing this component. */\n    inputRef?: (ref: HTMLInputElement) => any;\n\n    /** Name of icon (the part after `pt-icon-`) to render on left side of input. */\n    leftIconName?: string;\n\n    /** Placeholder text in the absence of any value. */\n    placeholder?: string;\n\n    /**\n     * Element to render on right side of input.\n     * For best results, use a minimal button, tag, or small spinner.\n     */\n    rightElement?: JSX.Element;\n\n    /**\n     * HTML `input` type attribute.\n     * @default \"text\"\n     */\n    type?: string;\n}\n\nexport interface IInputGroupState {\n    rightElementWidth?: number;\n}\n\n@PureRender\nexport class InputGroup extends React.Component<HTMLInputProps & IInputGroupProps, IInputGroupState> {\n    public static displayName = \"Blueprint.InputGroup\";\n\n    public state: IInputGroupState = {\n        rightElementWidth: 30,\n    };\n\n    private rightElement: HTMLElement;\n    private refHandlers = {\n        rightElement: (ref: HTMLSpanElement) => this.rightElement = ref,\n    };\n\n    public render() {\n        const { className, intent } = this.props;\n        const classes = classNames(Classes.INPUT_GROUP, Classes.intentClass(intent), {\n            [Classes.DISABLED]: this.props.disabled,\n        }, className);\n        const style: React.CSSProperties = { paddingRight: this.state.rightElementWidth };\n\n        return (\n            <div className={classes}>\n                {this.maybeRenderLeftIcon()}\n                <input\n                    type=\"text\"\n                    {...removeNonHTMLProps(this.props)}\n                    className={Classes.INPUT}\n                    ref={this.props.inputRef}\n                    style={style}\n                />\n                {this.maybeRenderRightElement()}\n            </div>\n        );\n    }\n\n    public componentDidMount() {\n        this.updateInputWidth();\n    }\n\n    public componentDidUpdate() {\n        this.updateInputWidth();\n    }\n\n    private maybeRenderLeftIcon() {\n        const { leftIconName } = this.props;\n        if (leftIconName == null) {\n            return undefined;\n        }\n        const iconClass = Classes.iconClass(leftIconName);\n        return <span className={classNames(\"pt-icon\", iconClass)} />;\n    }\n\n    private maybeRenderRightElement() {\n        const { rightElement } = this.props;\n        if (rightElement == null) {\n            return undefined;\n        }\n        return <span className=\"pt-input-action\" ref={this.refHandlers.rightElement}>{rightElement}</span>;\n    }\n\n    private updateInputWidth() {\n        if (this.rightElement != null) {\n            const { clientWidth } = this.rightElement;\n            // small threshold to prevent infinite loops\n            if (Math.abs(clientWidth - this.state.rightElementWidth) > 2) {\n                this.setState({ rightElementWidth: clientWidth });\n            }\n        } else {\n            this.setState({ rightElementWidth: 0 });\n        }\n    }\n}\n\nexport const InputGroupFactory = React.createFactory(InputGroup);\n"]}