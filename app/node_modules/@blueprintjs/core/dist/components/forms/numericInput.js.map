{"version":3,"sources":["../src/components/forms/numericInput.tsx"],"names":[],"mappings":"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","file":"components/forms/numericInput.js","sourcesContent":["/*\n * Copyright 2017 Palantir Technologies, Inc. All rights reserved.\n * Licensed under the BSD-3 License as modified (the “License”); you may obtain a copy\n * of the license at https://github.com/palantir/blueprint/blob/master/LICENSE\n * and https://github.com/palantir/blueprint/blob/master/PATENTS\n */\n\nimport * as classNames from \"classnames\";\nimport * as PureRender from \"pure-render-decorator\";\nimport * as React from \"react\";\n\nimport {\n    AbstractComponent,\n    Classes,\n    HTMLInputProps,\n    IIntentProps,\n    IProps,\n    Keys,\n    Position,\n    removeNonHTMLProps,\n    Utils,\n} from \"../../common\";\nimport * as Errors from \"../../common/errors\";\n\nimport { Button } from \"../button/buttons\";\nimport { InputGroup } from \"./inputGroup\";\n\nexport interface INumericInputProps extends IIntentProps, IProps {\n\n    /**\n     * The position of the buttons with respect to the input field.\n     * @default Position.RIGHT\n     */\n    buttonPosition?: Position.LEFT | Position.RIGHT | \"none\";\n\n    /**\n     * Whether the input is in a non-interactive state.\n     * @default false\n     */\n    disabled?: boolean;\n\n    /** The name of icon (the part after `pt-icon-`) to render on left side of input. */\n    leftIconName?: string;\n\n    /** The placeholder text in the absence of any value. */\n    placeholder?: string;\n\n    /**\n     * The increment between successive values when `shift` is held.\n     * @default 10\n     */\n    majorStepSize?: number;\n\n    /** The maximum value of the input. */\n    max?: number;\n\n    /** The minimum value of the input. */\n    min?: number;\n\n    /**\n     * The increment between successive values when `alt` is held.\n     * @default 0.1\n     */\n    minorStepSize?: number;\n\n    /**\n     * The increment between successive values when no modifier keys are held.\n     * @default 1\n     */\n    stepSize?: number;\n\n    /** The value to display in the input field. */\n    value?: number | string;\n\n    /** The callback invoked when the value changes. */\n    onValueChange?(valueAsNumber: number, valueAsString: string): void;\n}\n\nexport interface INumericInputState {\n    isInputGroupFocused?: boolean;\n    isButtonGroupFocused?: boolean;\n    shouldSelectAfterUpdate?: boolean;\n    value?: string;\n}\n\nenum IncrementDirection {\n    DOWN = -1,\n    UP = +1,\n}\n\n@PureRender\nexport class NumericInput extends AbstractComponent<HTMLInputProps & INumericInputProps, INumericInputState> {\n    public static displayName = \"Blueprint.NumericInput\";\n\n    public static defaultProps: INumericInputProps = {\n        buttonPosition: Position.RIGHT,\n        majorStepSize: 10,\n        minorStepSize: 0.1,\n        stepSize: 1,\n        value: NumericInput.VALUE_EMPTY,\n    };\n\n    private static DECREMENT_KEY = \"decrement\";\n    private static INCREMENT_KEY = \"increment\";\n\n    private static DECREMENT_ICON_NAME = \"chevron-down\";\n    private static INCREMENT_ICON_NAME = \"chevron-up\";\n\n    private static VALUE_EMPTY = \"\";\n    private static VALUE_ZERO = \"0\";\n\n    private inputElement: HTMLInputElement;\n\n    public constructor(props?: HTMLInputProps & INumericInputProps, context?: any) {\n        super(props, context);\n\n        this.state = {\n            shouldSelectAfterUpdate: false,\n            value: this.getValueOrEmptyValue(props.value),\n        };\n    }\n\n    public componentWillReceiveProps(nextProps: HTMLInputProps & INumericInputProps) {\n        super.componentWillReceiveProps(nextProps);\n\n        const value = this.getValueOrEmptyValue(nextProps.value);\n\n        const didMinChange = nextProps.min !== this.props.min;\n        const didMaxChange = nextProps.max !== this.props.max;\n        const didBoundsChange = didMinChange || didMaxChange;\n\n        // if a new min and max were provided that cause the existing value to fall\n        // outside of the new bounds, then clamp the value to the new valid range.\n        if (didBoundsChange) {\n            const sanitizedValue = (value !== NumericInput.VALUE_EMPTY)\n                ? this.getSanitizedValue(value, /* delta */ 0, nextProps.min, nextProps.max)\n                : NumericInput.VALUE_EMPTY;\n            this.setState({ value: sanitizedValue, shouldSelectAfterUpdate: true });\n        } else {\n            this.setState({ value, shouldSelectAfterUpdate: true });\n        }\n    }\n\n    public render() {\n        const { buttonPosition, className } = this.props;\n\n        const inputGroupHtmlProps = removeNonHTMLProps(this.props, [\n            \"buttonPosition\",\n            \"majorStepSize\",\n            \"minorStepSize\",\n            \"onValueChange\",\n            \"stepSize\",\n        ], true);\n\n        const inputGroup = (\n            <InputGroup\n                {...inputGroupHtmlProps}\n                intent={this.props.intent}\n                inputRef={this.inputRef}\n                key=\"input-group\"\n                leftIconName={this.props.leftIconName}\n                onFocus={this.handleInputFocus}\n                onBlur={this.handleInputBlur}\n                onChange={this.handleInputChange}\n                onKeyDown={this.handleInputKeyDown}\n                value={this.state.value}\n            />\n        );\n\n        // the strict null check here is intentional; an undefined value should\n        // fall back to the default button position on the right side.\n        if (buttonPosition === \"none\" || buttonPosition === null) {\n            // If there are no buttons, then the control group will render the\n            // text field with squared border-radii on the left side, causing it\n            // to look weird. This problem goes away if we simply don't nest within\n            // a control group.\n            return (\n                <div className={className}>\n                    {inputGroup}\n                </div>\n            );\n        } else {\n            const incrementButton = this.renderButton(\n                NumericInput.INCREMENT_KEY, NumericInput.INCREMENT_ICON_NAME, this.handleIncrementButtonClick);\n            const decrementButton = this.renderButton(\n                NumericInput.DECREMENT_KEY, NumericInput.DECREMENT_ICON_NAME, this.handleDecrementButtonClick);\n\n            const buttonGroup = (\n                <div key=\"button-group\" className={classNames(Classes.BUTTON_GROUP, Classes.VERTICAL)}>\n                    {incrementButton}\n                    {decrementButton}\n                </div>\n            );\n\n            const inputElems = (buttonPosition === Position.LEFT)\n                ? [buttonGroup, inputGroup]\n                : [inputGroup, buttonGroup];\n\n            return (\n                <div className={classNames(Classes.NUMERIC_INPUT, Classes.CONTROL_GROUP, className)}>\n                    {inputElems}\n                </div>\n            );\n        }\n    }\n\n    public componentDidUpdate() {\n        if (this.state.shouldSelectAfterUpdate) {\n            this.inputElement.setSelectionRange(0, this.state.value.length);\n        }\n    }\n\n    protected validateProps(nextProps: HTMLInputProps & INumericInputProps) {\n        const { majorStepSize, max, min, minorStepSize, stepSize } = nextProps;\n        if (min && max && min >= max) {\n            throw new Error(Errors.NUMERIC_INPUT_MIN_MAX);\n        }\n        if (stepSize == null) {\n            throw new Error(Errors.NUMERIC_INPUT_STEP_SIZE_NULL);\n        }\n        if (stepSize <= 0) {\n            throw new Error(Errors.NUMERIC_INPUT_STEP_SIZE_NON_POSITIVE);\n        }\n        if (minorStepSize && minorStepSize <= 0) {\n            throw new Error(Errors.NUMERIC_INPUT_MINOR_STEP_SIZE_NON_POSITIVE);\n        }\n        if (majorStepSize && majorStepSize <= 0) {\n            throw new Error(Errors.NUMERIC_INPUT_MAJOR_STEP_SIZE_NON_POSITIVE);\n        }\n        if (minorStepSize && minorStepSize > stepSize) {\n            throw new Error(Errors.NUMERIC_INPUT_MINOR_STEP_SIZE_BOUND);\n        }\n        if (majorStepSize && majorStepSize < stepSize) {\n            throw new Error(Errors.NUMERIC_INPUT_MAJOR_STEP_SIZE_BOUND);\n        }\n    }\n\n    // Render Helpers\n    // ==============\n\n    private renderButton(key: string, iconName: string, onClick: React.MouseEventHandler<HTMLElement>) {\n        // respond explicitly on key *up*, because onKeyDown triggers multiple\n        // times and doesn't always receive modifier-key flags, leading to an\n        // unintuitive/out-of-control incrementing experience.\n        const onKeyUp = (e: React.KeyboardEvent<HTMLInputElement>) => {\n            this.handleButtonKeyUp(e, onClick);\n        };\n        return (\n            <Button\n                disabled={this.props.disabled || this.props.readOnly}\n                iconName={iconName}\n                intent={this.props.intent}\n                key={key}\n                onBlur={this.handleButtonBlur}\n                onClick={onClick}\n                onFocus={this.handleButtonFocus}\n                onKeyUp={onKeyUp}\n            />\n        );\n    }\n\n    private inputRef = (input: HTMLInputElement) => {\n        this.inputElement = input;\n    }\n\n    // Callbacks - Buttons\n    // ===================\n\n    private handleDecrementButtonClick = (e: React.MouseEvent<HTMLInputElement>) => {\n        const delta = this.getIncrementDelta(IncrementDirection.DOWN, e.shiftKey, e.altKey);\n        this.incrementValue(delta);\n    }\n\n    private handleIncrementButtonClick = (e: React.MouseEvent<HTMLInputElement>) => {\n        const delta = this.getIncrementDelta(IncrementDirection.UP, e.shiftKey, e.altKey);\n        this.incrementValue(delta);\n    }\n\n    private handleButtonFocus = () => {\n        this.setState({ isButtonGroupFocused: true });\n    }\n\n    private handleButtonBlur = () => {\n        this.setState({ isButtonGroupFocused: false });\n    }\n\n    private handleButtonKeyUp =\n        (e: React.KeyboardEvent<HTMLInputElement>, onClick: React.MouseEventHandler<HTMLInputElement>) => {\n\n        if (e.keyCode === Keys.SPACE || e.keyCode === Keys.ENTER) {\n            // prevent the page from scrolling (this is the default browser\n            // behavior for shift + space or alt + space).\n            e.preventDefault();\n\n            // trigger a click event to update the input value appropriately,\n            // based on the active modifier keys.\n            const fakeClickEvent = {\n                altKey: e.altKey,\n                currentTarget: e.currentTarget,\n                shiftKey: e.shiftKey,\n                target: e.target,\n            };\n            onClick(fakeClickEvent as React.MouseEvent<HTMLInputElement>);\n        }\n    }\n\n    // Callbacks - Input\n    // =================\n\n    private handleInputFocus = (e: React.FocusEvent<HTMLInputElement>) => {\n        this.setState({ isInputGroupFocused: true });\n        Utils.safeInvoke(this.props.onFocus, e);\n    }\n\n    private handleInputBlur = (e: React.FocusEvent<HTMLInputElement>) => {\n        this.setState({ isInputGroupFocused: false });\n        Utils.safeInvoke(this.props.onBlur, e);\n    }\n\n    private handleInputKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {\n        if (this.props.disabled || this.props.readOnly) {\n            return;\n        }\n\n        const { keyCode } = e;\n\n        let direction: IncrementDirection;\n\n        if (keyCode === Keys.ARROW_UP) {\n            direction = IncrementDirection.UP;\n        } else if (keyCode === Keys.ARROW_DOWN) {\n            direction = IncrementDirection.DOWN;\n        }\n\n        if (direction != null) {\n            // when the input field has focus, some key combinations will modify\n            // the field's selection range. we'll actually want to select all\n            // text in the field after we modify the value on the following\n            // lines. preventing the default selection behavior lets us do that\n            // without interference.\n            e.preventDefault();\n\n            const delta = this.getIncrementDelta(direction, e.shiftKey, e.altKey);\n            this.incrementValue(delta);\n        }\n\n        Utils.safeInvoke(this.props.onKeyDown, e);\n    }\n\n    private handleInputChange = (e: React.FormEvent<HTMLInputElement>) => {\n        const nextValue = (e.target as HTMLInputElement).value;\n        this.setState({ shouldSelectAfterUpdate : false, value: nextValue });\n        this.invokeOnChangeCallbacks(nextValue);\n    }\n\n    private invokeOnChangeCallbacks(value: string) {\n        const valueAsString = value;\n        const valueAsNumber = +value; // coerces non-numeric strings to NaN\n        Utils.safeInvoke(this.props.onValueChange, valueAsNumber, valueAsString);\n    }\n\n    // Value Helpers\n    // =============\n\n    private incrementValue(delta: number/*, e: React.FormEvent<HTMLInputElement>*/) {\n        // pretend we're incrementing from 0 if currValue is empty\n        const currValue = this.state.value || NumericInput.VALUE_ZERO;\n        const nextValue = this.getSanitizedValue(currValue, delta, this.props.min, this.props.max);\n\n        this.setState({ shouldSelectAfterUpdate : true, value: nextValue });\n        this.invokeOnChangeCallbacks(nextValue);\n    }\n\n    private getIncrementDelta(direction: IncrementDirection, isShiftKeyPressed: boolean, isAltKeyPressed: boolean) {\n        const { majorStepSize, minorStepSize, stepSize } = this.props;\n\n        if (isShiftKeyPressed && majorStepSize != null) {\n            return direction * majorStepSize;\n        } else if (isAltKeyPressed && minorStepSize != null) {\n            return direction * minorStepSize;\n        } else {\n            return direction * stepSize;\n        }\n    }\n\n    private getSanitizedValue(value: string, delta: number = 0, min: number, max: number) {\n        if (!this.isValueNumeric(value)) {\n            return NumericInput.VALUE_EMPTY;\n        }\n\n        // truncate floating-point result to avoid precision issues when adding\n        // non-integer, binary-unfriendly deltas like 0.1\n        let nextValue = parseFloat((parseFloat(value) + delta).toFixed(2));\n\n        // defaultProps won't work if the user passes in null, so just default\n        // to +/- infinity here instead, as a catch-all.\n        const adjustedMin = (min != null) ? min : -Infinity;\n        const adjustedMax = (max != null) ? max : Infinity;\n        nextValue = Utils.clamp(nextValue, adjustedMin, adjustedMax);\n\n        return nextValue.toString();\n    }\n\n    private getValueOrEmptyValue(value: number | string) {\n        return (value != null) ? value.toString() : NumericInput.VALUE_EMPTY;\n    }\n\n    private isValueNumeric(value: string) {\n        // checking if a string is numeric in Typescript is a big pain, because\n        // we can't simply toss a string parameter to isFinite. below is the\n        // essential approach that jQuery uses, which involves subtracting a\n        // parsed numeric value from the string representation of the value. we\n        // need to cast the value to the `any` type to allow this operation\n        // between dissimilar types.\n        return value != null && ((value as any) - parseFloat(value) + 1) >= 0;\n    }\n}\n\nexport const NumericInputFactory = React.createFactory(NumericInput);\n"]}