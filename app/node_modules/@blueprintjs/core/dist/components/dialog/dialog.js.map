{"version":3,"sources":["../src/components/dialog/dialog.tsx"],"names":[],"mappings":"AAAA;;;;;GAKG;;;AAEH,uCAAyC;AACzC,6BAA+B;AAE/B,oEAAmE;AACnE,8CAAgD;AAChD,4CAA8C;AAE9C,8CAAgF;AA2ChF;IAA4B,kCAAmC;IAA/D;QAAA,qEA6DC;QAxDU,iBAAW,GAAG,kBAAkB,CAAC;;IAwD5C,CAAC;IAtDU,uBAAM,GAAb;QACI,MAAM,CAAC,CACH,oBAAC,iBAAO,uBACA,IAAI,CAAC,KAAK,IACd,SAAS,EAAE,UAAU,WAAG,GAAC,OAAO,CAAC,wBAAwB,IAAG,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,MAAG,EACjF,WAAW,EAAE,IAAI;YAEjB,6BAAK,SAAS,EAAE,UAAU,CAAC,OAAO,CAAC,MAAM,EAAE,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,EAAE,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,KAAK;gBACpF,IAAI,CAAC,iBAAiB,EAAE;gBACxB,IAAI,CAAC,KAAK,CAAC,QAAQ,CAClB,CACA,CACb,CAAC;;IACN,CAAC;IAES,8BAAa,GAAvB,UAAwB,KAAmB;QACvC,EAAE,CAAC,CAAC,KAAK,CAAC,KAAK,IAAI,IAAI,CAAC,CAAC,CAAC;YACtB,EAAE,CAAC,CAAC,KAAK,CAAC,QAAQ,IAAI,IAAI,CAAC,CAAC,CAAC;gBACzB,OAAO,CAAC,KAAK,CAAC,MAAM,CAAC,6BAA6B,CAAC,CAAC;YACxD,CAAC;YACD,EAAE,CAAC,CAAC,KAAK,CAAC,kBAAkB,IAAI,IAAI,CAAC,CAAC,CAAC;gBACnC,OAAO,CAAC,KAAK,CAAC,MAAM,CAAC,qCAAqC,CAAC,CAAC;YAChE,CAAC;QACL,CAAC;IACL,CAAC;IAEO,uCAAsB,GAA9B;QACI,0DAA0D;QAC1D,+DAA+D;QAC/D,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,kBAAkB,KAAK,KAAK,CAAC,CAAC,CAAC;YAC1C,IAAM,OAAO,GAAG,UAAU,CAAC,OAAO,CAAC,mBAAmB,EAAE,OAAO,CAAC,SAAS,CAAC,aAAa,CAAC,CAAC,CAAC;YAC1F,MAAM,CAAC,8CAAmB,OAAO,EAAC,SAAS,EAAE,OAAO,EAAE,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC,OAAO,GAAI,CAAC;QAC1F,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,MAAM,CAAC,SAAS,CAAC;QACrB,CAAC;IACL,CAAC;IAEO,kCAAiB,GAAzB;QACI,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,IAAI,IAAI,CAAC,CAAC,CAAC;YAC3B,MAAM,CAAC,SAAS,CAAC;QACrB,CAAC;QAED,IAAI,SAAsB,CAAC;QAC3B,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,IAAI,IAAI,CAAC,CAAC,CAAC;YAC9B,SAAS,GAAG,8BAAM,SAAS,EAAE,UAAU,CAAC,OAAO,CAAC,UAAU,EAAE,OAAO,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,GAAI,CAAC;QAC5G,CAAC;QACD,MAAM,CAAC,CACH,6BAAK,SAAS,EAAE,OAAO,CAAC,aAAa;YAChC,SAAS;YACV,gCAAK,IAAI,CAAC,KAAK,CAAC,KAAK,CAAM;YAC1B,IAAI,CAAC,sBAAsB,EAAE,CAC5B,CACT,CAAC;IACN,CAAC;IACL,aAAC;AAAD,CA7DA,AA6DC,CA7D2B,qCAAiB;AAC3B,mBAAY,GAAiB;IACvC,MAAM,EAAE,KAAK;CAChB,CAAC;AAHO,wBAAM;AA+DN,QAAA,aAAa,GAAG,KAAK,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC","file":"components/dialog/dialog.js","sourcesContent":["/*\n * Copyright 2015 Palantir Technologies, Inc. All rights reserved.\n * Licensed under the BSD-3 License as modified (the “License”); you may obtain a copy\n * of the license at https://github.com/palantir/blueprint/blob/master/LICENSE\n * and https://github.com/palantir/blueprint/blob/master/PATENTS\n */\n\nimport * as classNames from \"classnames\";\nimport * as React from \"react\";\n\nimport { AbstractComponent } from \"../../common/abstractComponent\";\nimport * as Classes from \"../../common/classes\";\nimport * as Errors from \"../../common/errors\";\nimport { IProps } from \"../../common/props\";\nimport { IBackdropProps, IOverlayableProps, Overlay } from \"../overlay/overlay\";\n\nexport interface IDialogProps extends IOverlayableProps, IBackdropProps, IProps {\n    /**\n     * Toggles the visibility of the overlay and its children.\n     * This prop is required because the component is controlled.\n     */\n    isOpen: boolean;\n\n    /**\n     * Dialog always has a backdrop so this prop is excluded from the public API.\n     * @internal\n     */\n    hasBackdrop?: boolean;\n\n    /**\n     * Name of icon (the part after `pt-icon-`) to appear in the dialog's header.\n     * Note that the header will only be rendered if `title` is provided.\n     */\n    iconName?: string;\n\n    /**\n     * Whether to show the close \"X\" button in the dialog's header.\n     * Note that the header will only be rendered if `title` is provided.\n     * @default true\n     */\n    isCloseButtonShown?: boolean;\n\n    /**\n     * CSS Styles to apply to the .pt-dialog element.\n     * @default {}\n     */\n    style?: React.CSSProperties;\n\n    /**\n     * Title of dialog.\n     * If provided, a `.pt-dialog-header` element will be rendered inside the dialog\n     * before any children elements.\n     * In the next major version, this prop will be required.\n     */\n    title?: string | JSX.Element;\n}\n\nexport class Dialog extends AbstractComponent<IDialogProps, {}> {\n    public static defaultProps: IDialogProps = {\n        isOpen: false,\n    };\n\n    public displayName = \"Blueprint.Dialog\";\n\n    public render() {\n        return (\n            <Overlay\n                {...this.props}\n                className={classNames({ [Classes.OVERLAY_SCROLL_CONTAINER]: !this.props.inline })}\n                hasBackdrop={true}\n            >\n                <div className={classNames(Classes.DIALOG, this.props.className)} style={this.props.style}>\n                    {this.maybeRenderHeader()}\n                    {this.props.children}\n                </div>\n            </Overlay>\n        );\n    }\n\n    protected validateProps(props: IDialogProps) {\n        if (props.title == null) {\n            if (props.iconName != null) {\n                console.error(Errors.WARNING_DIALOG_NO_HEADER_ICON);\n            }\n            if (props.isCloseButtonShown != null) {\n                console.error(Errors.WARNING_DIALOG_NO_HEADER_CLOSE_BUTTON);\n            }\n        }\n    }\n\n    private maybeRenderCloseButton() {\n        // for now, show close button if prop is undefined or null\n        // this gives us a behavior as if the default value were `true`\n        if (this.props.isCloseButtonShown !== false) {\n            const classes = classNames(Classes.DIALOG_CLOSE_BUTTON, Classes.iconClass(\"small-cross\"));\n            return <button aria-label=\"Close\" className={classes} onClick={this.props.onClose} />;\n        } else {\n            return undefined;\n        }\n    }\n\n    private maybeRenderHeader() {\n        if (this.props.title == null) {\n            return undefined;\n        }\n\n        let maybeIcon: JSX.Element;\n        if (this.props.iconName != null) {\n            maybeIcon = <span className={classNames(Classes.ICON_LARGE, Classes.iconClass(this.props.iconName))} />;\n        }\n        return (\n            <div className={Classes.DIALOG_HEADER}>\n                {maybeIcon}\n                <h5>{this.props.title}</h5>\n                {this.maybeRenderCloseButton()}\n            </div>\n        );\n    }\n}\n\nexport const DialogFactory = React.createFactory(Dialog);\n"]}