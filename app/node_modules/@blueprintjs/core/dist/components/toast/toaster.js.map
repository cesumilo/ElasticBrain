{"version":3,"sources":["../src/components/toast/toaster.tsx"],"names":[],"mappings":"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","file":"components/toast/toaster.js","sourcesContent":["/*\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n * Licensed under the BSD-3 License as modified (the “License”); you may obtain a copy\n * of the license at https://github.com/palantir/blueprint/blob/master/LICENSE\n * and https://github.com/palantir/blueprint/blob/master/PATENTS\n */\n\nimport * as classNames from \"classnames\";\nimport * as PureRender from \"pure-render-decorator\";\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\n\nimport { AbstractComponent } from \"../../common/abstractComponent\";\nimport * as Classes from \"../../common/classes\";\nimport { TOASTER_INLINE_WARNING } from \"../../common/errors\";\nimport { ESCAPE } from \"../../common/keys\";\nimport { Position } from \"../../common/position\";\nimport { IProps } from \"../../common/props\";\nimport { safeInvoke } from \"../../common/utils\";\nimport { Overlay } from \"../overlay/overlay\";\nimport { IToastProps, Toast } from \"./toast\";\n\nexport type IToastOptions = IToastProps & {key?: string};\n\nexport interface IToaster {\n    /** Show a new toast to the user. Returns the unique key of the new toast. */\n    show(props: IToastProps): string;\n\n    /**\n     * Updates the toast with the given key to use the new props.\n     * Updating a key that does not exist is effectively a no-op.\n     */\n    update(key: string, props: IToastProps): void;\n\n    /** Dismiss the given toast instantly. */\n    dismiss(key: string): void;\n\n    /** Dismiss all toasts instantly. */\n    clear(): void;\n\n    /** Returns the props for all current toasts. */\n    getToasts(): IToastOptions[];\n}\n\nexport interface IToasterProps extends IProps {\n    /**\n     * Whether a toast should acquire application focus when it first opens.\n     * This is disabled by default so that toasts do not interrupt the user's flow.\n     * Note that `enforceFocus` is always disabled for `Toaster`s.\n     * @default false\n     */\n    autoFocus?: boolean;\n\n    /**\n     * Whether pressing the `esc` key should clear all active toasts.\n     * @default true\n     */\n    canEscapeKeyClear?: boolean;\n\n    /**\n     * Whether the toaster should be rendered inline or into a new element on `document.body`.\n     * If `true`, then positioning will be relative to the parent element.\n     *\n     * This prop is ignored by `Toaster.create()` as that method always appends a new element\n     * to the container.\n     * @default false\n     */\n    inline?: boolean;\n\n    /**\n     * Position of `Toaster` within its container. Note that `LEFT` and `RIGHT` are disallowed\n     * because Toaster only supports the top and bottom edges.\n     * @default Position.TOP\n     */\n    position?: Position;\n}\n\nexport interface IToasterState {\n    toasts: IToastOptions[];\n}\n\n@PureRender\nexport class Toaster extends AbstractComponent<IToasterProps, IToasterState> implements IToaster {\n    public static defaultProps: IToasterProps = {\n        autoFocus: false,\n        canEscapeKeyClear: true,\n        inline: false,\n        position: Position.TOP,\n    };\n\n    /**\n     * Create a new `Toaster` instance that can be shared around your application.\n     * The `Toaster` will be rendered into a new element appended to the given container.\n     */\n    public static create(props?: IToasterProps, container = document.body): IToaster {\n        if (props != null && props.inline != null) {\n            console.warn(TOASTER_INLINE_WARNING);\n        }\n        const containerElement = document.createElement(\"div\");\n        container.appendChild(containerElement);\n        return ReactDOM.render(<Toaster {...props} inline /> , containerElement) as Toaster;\n    }\n\n    public state = {\n        toasts: [] as IToastOptions[],\n    };\n\n    // auto-incrementing identifier for un-keyed toasts\n    private toastId = 0;\n\n    public show(props: IToastProps) {\n        const options = this.createToastOptions(props);\n        this.setState((prevState) => ({\n            toasts: [options, ...prevState.toasts],\n        }));\n        return options.key;\n    }\n\n    public update(key: string, props: IToastProps) {\n        const options = this.createToastOptions(props, key);\n        this.setState((prevState) => ({\n            toasts: prevState.toasts.map((t) => t.key === key ? options : t),\n        }));\n    }\n\n    public dismiss(key: string, timeoutExpired = false) {\n        this.setState(({ toasts }) => ({\n            toasts: toasts.filter((t) => {\n                const matchesKey = t.key === key;\n                if (matchesKey) {\n                    safeInvoke(t.onDismiss, timeoutExpired);\n                }\n                return !matchesKey;\n            }),\n        }));\n    }\n\n    public clear() {\n        this.state.toasts.map((t) => safeInvoke(t.onDismiss, false));\n        this.setState({ toasts: [] });\n    }\n\n    public getToasts() {\n        return this.state.toasts;\n    }\n\n    public render() {\n        // $pt-transition-duration * 3 + $pt-transition-duration / 2\n        const classes = classNames(Classes.TOAST_CONTAINER, this.getPositionClasses(), this.props.className);\n        return (\n            <Overlay\n                autoFocus={this.props.autoFocus}\n                canEscapeKeyClose={this.props.canEscapeKeyClear}\n                canOutsideClickClose={false}\n                className={classes}\n                enforceFocus={false}\n                hasBackdrop={false}\n                inline={this.props.inline}\n                isOpen={this.state.toasts.length > 0}\n                onClose={this.handleClose}\n                transitionDuration={350}\n                transitionName=\"pt-toast\"\n            >\n                {this.state.toasts.map(this.renderToast, this)}\n            </Overlay>\n        );\n    }\n\n    protected validateProps(props: IToasterProps) {\n        if (props.position === Position.LEFT || props.position === Position.RIGHT) {\n            throw new Error(\"Toaster does not support LEFT or RIGHT positions.\");\n        }\n    }\n\n    private renderToast(toast: IToastOptions) {\n        return <Toast {...toast} onDismiss={this.getDismissHandler(toast)} />;\n    }\n\n    private createToastOptions(props: IToastProps, key = `toast-${this.toastId++}`) {\n        // clone the object before adding the key prop to avoid leaking the mutation\n        return { ...props, key };\n    }\n\n    private getPositionClasses() {\n        const positions = Position[this.props.position].split(\"_\");\n        // NOTE that there is no -center class because that's the default style\n        return positions.map((p) => `${Classes.TOAST_CONTAINER}-${p.toLowerCase()}`);\n    }\n\n    private getDismissHandler = (toast: IToastOptions) => (timeoutExpired: boolean) => {\n        this.dismiss(toast.key, timeoutExpired);\n    }\n\n    private handleClose = (e: React.KeyboardEvent<HTMLElement>) => {\n        // NOTE that `e` isn't always a KeyboardEvent but that's the only type we care about\n        if (e.which === ESCAPE) {\n            this.clear();\n        }\n    }\n}\n"]}