{"version":3,"sources":["../src/components/tree/tree.tsx"],"names":[],"mappings":"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","file":"components/tree/tree.js","sourcesContent":["/*\n * Copyright 2015 Palantir Technologies, Inc. All rights reserved.\n * Licensed under the BSD-3 License as modified (the “License”); you may obtain a copy\n * of the license at https://github.com/palantir/blueprint/blob/master/LICENSE\n * and https://github.com/palantir/blueprint/blob/master/PATENTS\n */\n\nimport * as classNames from \"classnames\";\nimport * as React from \"react\";\n\nimport * as Classes from \"../../common/classes\";\nimport { IProps } from \"../../common/props\";\nimport { isFunction } from \"../../common/utils\";\nimport { ITreeNode, TreeNode } from \"./treeNode\";\n\nexport type TreeEventHandler = (node: ITreeNode, nodePath: number[], e: React.MouseEvent<HTMLElement>) => void;\n\nexport interface ITreeProps extends IProps {\n   /**\n    * The data specifying the contents and appearance of the tree.\n    */\n   contents: ITreeNode[];\n\n   /**\n    * Invoked when a node is clicked anywhere other than the caret for expanding/collapsing the node.\n    */\n   onNodeClick?: TreeEventHandler;\n\n   /**\n    * Invoked when caret of an expanded node is clicked.\n    */\n   onNodeCollapse?: TreeEventHandler;\n\n   /**\n    * Invoked when a node is double-clicked. Be careful when using this in combination with\n    * an `onNodeClick` (single-click) handler, as the way this behaves can vary between browsers.\n    * See http://stackoverflow.com/q/5497073/3124288\n    */\n   onNodeDoubleClick?: TreeEventHandler;\n\n   /**\n    * Invoked when the caret of a collapsed node is clicked.\n    */\n   onNodeExpand?: TreeEventHandler;\n}\n\nexport class Tree extends React.Component<ITreeProps, {}> {\n    public static nodeFromPath(path: number[], treeNodes: ITreeNode[]): ITreeNode {\n        if (path.length === 1) {\n            return treeNodes[path[0]];\n        } else {\n            return Tree.nodeFromPath(path.slice(1), treeNodes[path[0]].childNodes);\n        }\n    }\n\n    public render() {\n        return (\n            <div className={classNames(Classes.TREE, this.props.className)}>\n                {this.renderNodes(this.props.contents, [], Classes.TREE_ROOT)}\n            </div>\n        );\n    }\n\n    private renderNodes(treeNodes: ITreeNode[], currentPath?: number[], className?: string): JSX.Element {\n        if (treeNodes == null) {\n           return null;\n        }\n\n        const nodeItems = treeNodes.map((node, i) => {\n            const elementPath = currentPath.concat(i);\n            return (\n                <TreeNode\n                    {...node}\n                    key={node.id}\n                    depth={elementPath.length - 1}\n                    onClick={this.handleNodeClick}\n                    onCollapse={this.handleNodeCollapse}\n                    onDoubleClick={this.handleNodeDoubleClick}\n                    onExpand={this.handleNodeExpand}\n                    path={elementPath}\n                >\n                    {this.renderNodes(node.childNodes, elementPath)}\n                </TreeNode>\n            );\n        });\n\n        return (\n            <ul className={classNames(Classes.TREE_NODE_LIST, className)}>\n                {nodeItems}\n            </ul>\n        );\n    }\n\n    private handleNodeCollapse = (node: TreeNode, e: React.MouseEvent<HTMLElement>) => {\n        this.handlerHelper(this.props.onNodeCollapse, node, e);\n    }\n\n    private handleNodeClick = (node: TreeNode, e: React.MouseEvent<HTMLElement>) => {\n        this.handlerHelper(this.props.onNodeClick, node, e);\n    }\n\n    private handleNodeDoubleClick = (node: TreeNode, e: React.MouseEvent<HTMLElement>) => {\n        this.handlerHelper(this.props.onNodeDoubleClick, node, e);\n    }\n\n    private handleNodeExpand = (node: TreeNode, e: React.MouseEvent<HTMLElement>) => {\n        this.handlerHelper(this.props.onNodeExpand, node, e);\n    }\n\n    private handlerHelper(handlerFromProps: TreeEventHandler, node: TreeNode, e: React.MouseEvent<HTMLElement>) {\n        if (isFunction(handlerFromProps)) {\n            const nodeData = Tree.nodeFromPath(node.props.path, this.props.contents);\n            handlerFromProps(nodeData, node.props.path, e);\n        }\n    }\n}\n\nexport const TreeFactory = React.createFactory(Tree);\n"]}