{"version":3,"sources":["../src/components/collapse/collapse.tsx"],"names":[],"mappings":"AAAA;;;;;GAKG;;;AAEH,uCAAyC;AACzC,6BAA+B;AAE/B,oEAAmE;AACnE,8CAAgD;AAiChD,IAAY,eAMX;AAND,WAAY,eAAe;IACvB,yDAAM,CAAA;IACN,2DAAO,CAAA;IACP,qDAAI,CAAA;IACJ,uEAAa,CAAA;IACb,mEAAW,CAAA;AACf,CAAC,EANW,eAAe,GAAf,uBAAe,KAAf,uBAAe,QAM1B;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;GA0BG;AACH;IAA8B,oCAAiD;IAA/E;QAAA,qEA6GC;QApGU,WAAK,GAAG;YACX,cAAc,EAAE,eAAe,CAAC,IAAI;YACpC,MAAM,EAAE,KAAK;SAChB,CAAC;QAIF,mFAAmF;QAC3E,YAAM,GAAW,CAAC,CAAC;QAqEnB,wBAAkB,GAAG,UAAC,EAAe;YACzC,KAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;YACnB,EAAE,CAAC,CAAC,EAAE,IAAI,IAAI,CAAC,CAAC,CAAC;gBACb,KAAI,CAAC,MAAM,GAAG,KAAI,CAAC,QAAQ,CAAC,YAAY,CAAC;gBACzC,KAAI,CAAC,QAAQ,CAAC;oBACV,cAAc,EAAE,KAAI,CAAC,KAAK,CAAC,MAAM,GAAG,eAAe,CAAC,IAAI,GAAG,eAAe,CAAC,MAAM;oBACjF,MAAM,EAAK,KAAI,CAAC,MAAM,OAAI;iBAC7B,CAAC,CAAC;YACP,CAAC;QACL,CAAC,CAAA;;IAcL,CAAC;IA1FU,4CAAyB,GAAhC,UAAiC,SAAyB;QAA1D,iBAmBC;QAlBG,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,IAAI,IAAI,IAAI,IAAI,CAAC,QAAQ,CAAC,YAAY,KAAK,CAAC,CAAC,CAAC,CAAC;YAC5D,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC;QAC7C,CAAC;QACD,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,KAAK,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC;YACzC,IAAI,CAAC,aAAa,EAAE,CAAC;YACrB,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,cAAc,KAAK,eAAe,CAAC,MAAM,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC;gBAC5E,IAAI,CAAC,QAAQ,CAAC;oBACV,cAAc,EAAE,eAAe,CAAC,aAAa;oBAC7C,MAAM,EAAK,IAAI,CAAC,MAAM,OAAI;iBAC7B,CAAC,CAAC;YACP,CAAC;YAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,cAAc,KAAK,eAAe,CAAC,IAAI,IAAI,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC;gBAChF,IAAI,CAAC,QAAQ,CAAC;oBACV,cAAc,EAAE,eAAe,CAAC,OAAO;oBACvC,MAAM,EAAK,IAAI,CAAC,MAAM,OAAI;iBAC7B,CAAC,CAAC;gBACH,IAAI,CAAC,UAAU,CAAC,cAAM,OAAA,KAAI,CAAC,oBAAoB,EAAE,EAA3B,CAA2B,EAAE,IAAI,CAAC,KAAK,CAAC,kBAAkB,CAAC,CAAC;YACtF,CAAC;QACL,CAAC;IACL,CAAC;IAEM,yBAAM,GAAb;QACI,IAAM,YAAY,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,cAAc,KAAK,eAAe,CAAC,MAAM,CAAC,CAAC;QAC5E,IAAM,oBAAoB,GAAG,YAAY,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,cAAc,KAAK,eAAe,CAAC,WAAW,CAAC,CAAC;QACzG,IAAM,YAAY,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,KAAK,MAAM,CAAC,CAAC;QAEpD,IAAM,cAAc,GAAG;YACnB,MAAM,EAAE,YAAY,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,IAAI;YAC/C,QAAQ,EAAE,YAAY,GAAG,SAAS,GAAG,IAAI;YACzC,UAAU,EAAE,YAAY,GAAG,MAAM,GAAG,IAAI;SAC3C,CAAC;QAEF,IAAM,aAAa,GAAG;YAClB,SAAS,EAAE,oBAAoB,GAAG,eAAe,GAAG,iBAAe,IAAI,CAAC,MAAM,QAAK;YACnF,UAAU,EAAE,YAAY,GAAG,MAAM,GAAG,IAAI;SAC3C,CAAC;QAEF,0GAA0G;QAC1G,MAAM,CAAC,KAAK,CAAC,aAAa,CAAC,IAAI,CAAC,KAAK,CAAC,SAAmB,EAAE;YACvD,SAAS,EAAE,UAAU,CAAC,OAAO,CAAC,QAAQ,EAAE,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC;YAC7D,KAAK,EAAE,cAAc;SACxB,EACG,6BAAK,SAAS,EAAC,kBAAkB,EAAC,GAAG,EAAE,IAAI,CAAC,kBAAkB,EAAE,KAAK,EAAE,aAAa,IAC/E,YAAY,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,GAAG,IAAI,CACxC,CACT,CAAC;IACN,CAAC;IAEM,oCAAiB,GAAxB;QACI,IAAI,CAAC,WAAW,EAAE,CAAC;QACnB,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC;YACpB,IAAI,CAAC,QAAQ,CAAC,EAAE,cAAc,EAAE,eAAe,CAAC,IAAI,EAAE,MAAM,EAAE,MAAM,EAAE,CAAC,CAAC;QAC5E,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,IAAI,CAAC,QAAQ,CAAC,EAAE,cAAc,EAAE,eAAe,CAAC,MAAM,EAAE,CAAC,CAAC;QAC9D,CAAC;IACL,CAAC;IAEM,qCAAkB,GAAzB;QAAA,iBAQC;QAPG,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,cAAc,KAAK,eAAe,CAAC,aAAa,CAAC,CAAC,CAAC;YAC9D,IAAI,CAAC,UAAU,CAAC,cAAM,OAAA,KAAI,CAAC,QAAQ,CAAC;gBAChC,cAAc,EAAE,eAAe,CAAC,WAAW;gBAC3C,MAAM,EAAE,KAAK;aAChB,CAAC,EAHoB,CAGpB,CAAC,CAAC;YACJ,IAAI,CAAC,UAAU,CAAC,cAAM,OAAA,KAAI,CAAC,oBAAoB,EAAE,EAA3B,CAA2B,EAAE,IAAI,CAAC,KAAK,CAAC,kBAAkB,CAAC,CAAC;QACtF,CAAC;IACL,CAAC;IAaO,uCAAoB,GAA5B;QACI,MAAM,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC,CAAC;YAChC,KAAK,eAAe,CAAC,OAAO;gBACxB,IAAI,CAAC,QAAQ,CAAC,EAAE,cAAc,EAAE,eAAe,CAAC,IAAI,EAAE,MAAM,EAAE,MAAM,EAAE,CAAC,CAAC;gBACxE,KAAK,CAAC;YACV,KAAK,eAAe,CAAC,WAAW;gBAC5B,IAAI,CAAC,QAAQ,CAAC,EAAE,cAAc,EAAE,eAAe,CAAC,MAAM,EAAE,CAAC,CAAC;gBAC1D,KAAK,CAAC;YACV;gBACI,KAAK,CAAC;QACd,CAAC;IACL,CAAC;IACL,eAAC;AAAD,CA7GA,AA6GC,CA7G6B,qCAAiB;AAC7B,oBAAW,GAAG,oBAAoB,CAAC;AAEnC,qBAAY,GAAmB;IACzC,SAAS,EAAE,KAAK;IAChB,MAAM,EAAE,KAAK;IACb,kBAAkB,EAAE,GAAG;CAC1B,CAAC;AAPO,4BAAQ","file":"components/collapse/collapse.js","sourcesContent":["/*\n * Copyright 2015 Palantir Technologies, Inc. All rights reserved.\n * Licensed under the BSD-3 License as modified (the “License”); you may obtain a copy\n * of the license at https://github.com/palantir/blueprint/blob/master/LICENSE\n * and https://github.com/palantir/blueprint/blob/master/PATENTS\n */\n\nimport * as classNames from \"classnames\";\nimport * as React from \"react\";\n\nimport { AbstractComponent } from \"../../common/abstractComponent\";\nimport * as Classes from \"../../common/classes\";\nimport { IProps } from \"../../common/props\";\n\nexport interface ICollapseProps extends IProps {\n    /**\n     * Component to render as the root element.\n     * Useful when rendering a Collapse inside a `<table>`, for instance.\n     * @default \"div\"\n     */\n    component?: React.ReactType;\n\n    /**\n     * Whether the component is open or closed.\n     * @default false\n     */\n    isOpen?: boolean;\n\n    /**\n     * The length of time the transition takes, in ms. This must match the duration of the animation in CSS.\n     * Only set this prop if you override Blueprint's default transitions with new transitions of a different length.\n     * @default 200\n     */\n    transitionDuration?: number;\n}\n\nexport interface ICollapseState {\n    /** The height that should be used for the content animations. This is a CSS value, not just a number. */\n    height?: string;\n\n    /** The state the element is currently in. */\n    animationState?: AnimationStates;\n}\n\nexport enum AnimationStates {\n    CLOSED,\n    OPENING,\n    OPEN,\n    CLOSING_START,\n    CLOSING_END,\n}\n\n/*\n * A collapse can be in one of 5 states:\n * CLOSED\n * When in this state, the contents of the collapse is not rendered, the collapse height is 0,\n * and the body Y is at -height (so that the bottom of the body is at Y=0).\n *\n * OPEN\n * When in this state, the collapse height is set to auto, and the body Y is set to 0 (so the element can be seen\n * as normal).\n *\n * CLOSING_START\n * When in this state, height has been changed from auto to the measured height of the body to prepare for the\n * closing animation in CLOSING_END.\n *\n * CLOSING_END\n * When in this state, the height is set to 0 and the body Y is at -height. Both of these properties are transformed,\n * and then after the animation is complete, the state changes to CLOSED.\n *\n * OPENING\n * When in this state, the body is re-rendered, height is set to the measured body height and the body Y is set to 0.\n * This is all animated, and on complete, the state changes to OPEN.\n *\n * When changing the isOpen prop, the following happens to the states:\n * isOpen = true : CLOSED -> OPENING -> OPEN\n * isOpen = false: OPEN -> CLOSING_START -> CLOSING_END -> CLOSED\n * These are all animated.\n */\nexport class Collapse extends AbstractComponent<ICollapseProps, ICollapseState> {\n    public static displayName = \"Blueprint.Collapse\";\n\n    public static defaultProps: ICollapseProps = {\n        component: \"div\",\n        isOpen: false,\n        transitionDuration: 200,\n    };\n\n    public state = {\n        animationState: AnimationStates.OPEN,\n        height: \"0px\",\n    };\n\n    // The element containing the contents of the collapse.\n    private contents: HTMLElement;\n    // The most recent non-0 height (once a height has been measured - is 0 until then)\n    private height: number = 0;\n\n    public componentWillReceiveProps(nextProps: ICollapseProps) {\n        if (this.contents != null && this.contents.clientHeight !== 0) {\n            this.height = this.contents.clientHeight;\n        }\n        if (this.props.isOpen !== nextProps.isOpen) {\n            this.clearTimeouts();\n            if (this.state.animationState !== AnimationStates.CLOSED && !nextProps.isOpen) {\n                this.setState({\n                    animationState: AnimationStates.CLOSING_START,\n                    height: `${this.height}px`,\n                });\n            } else if (this.state.animationState !== AnimationStates.OPEN && nextProps.isOpen) {\n                this.setState({\n                    animationState: AnimationStates.OPENING,\n                    height: `${this.height}px`,\n                });\n                this.setTimeout(() => this.onDelayedStateChange(), this.props.transitionDuration);\n            }\n        }\n    }\n\n    public render() {\n        const showContents = (this.state.animationState !== AnimationStates.CLOSED);\n        const displayWithTransform = showContents && (this.state.animationState !== AnimationStates.CLOSING_END);\n        const isAutoHeight = (this.state.height === \"auto\");\n\n        const containerStyle = {\n            height: showContents ? this.state.height : null,\n            overflow: isAutoHeight ? \"visible\" : null,\n            transition: isAutoHeight ? \"none\" : null,\n        };\n\n        const contentsStyle = {\n            transform: displayWithTransform ? \"translateY(0)\" : `translateY(-${this.height}px)`,\n            transition: isAutoHeight ? \"none\" : null,\n        };\n\n        // quick type cast because there's no single overload that supports all three ReactTypes (str | Cmp | SFC)\n        return React.createElement(this.props.component as string, {\n            className: classNames(Classes.COLLAPSE, this.props.className),\n            style: containerStyle,\n        },\n            <div className=\"pt-collapse-body\" ref={this.contentsRefHandler} style={contentsStyle}>\n                {showContents ? this.props.children : null}\n            </div>,\n        );\n    }\n\n    public componentDidMount() {\n        this.forceUpdate();\n        if (this.props.isOpen) {\n            this.setState({ animationState: AnimationStates.OPEN, height: \"auto\" });\n        } else {\n            this.setState({ animationState: AnimationStates.CLOSED });\n        }\n    }\n\n    public componentDidUpdate() {\n        if (this.state.animationState === AnimationStates.CLOSING_START) {\n            this.setTimeout(() => this.setState({\n                animationState: AnimationStates.CLOSING_END,\n                height: \"0px\",\n            }));\n            this.setTimeout(() => this.onDelayedStateChange(), this.props.transitionDuration);\n        }\n    }\n\n    private contentsRefHandler = (el: HTMLElement) => {\n        this.contents = el;\n        if (el != null) {\n            this.height = this.contents.clientHeight;\n            this.setState({\n                animationState: this.props.isOpen ? AnimationStates.OPEN : AnimationStates.CLOSED,\n                height: `${this.height}px`,\n            });\n        }\n    }\n\n    private onDelayedStateChange() {\n        switch (this.state.animationState) {\n            case AnimationStates.OPENING:\n                this.setState({ animationState: AnimationStates.OPEN, height: \"auto\" });\n                break;\n            case AnimationStates.CLOSING_END:\n                this.setState({ animationState: AnimationStates.CLOSED });\n                break;\n            default:\n                break;\n        }\n    }\n}\n"]}