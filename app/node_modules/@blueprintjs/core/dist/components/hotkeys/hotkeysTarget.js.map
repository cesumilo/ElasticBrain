{"version":3,"sources":["../src/components/hotkeys/hotkeysTarget.tsx"],"names":[],"mappings":"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","file":"components/hotkeys/hotkeysTarget.js","sourcesContent":["/*\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n * Licensed under the BSD-3 License as modified (the “License”); you may obtain a copy\n * of the license at https://github.com/palantir/blueprint/blob/master/LICENSE\n * and https://github.com/palantir/blueprint/blob/master/PATENTS\n */\n\nimport * as React from \"react\";\nimport { isFunction, safeInvoke } from \"../../common/utils\";\n\nimport { IHotkeysProps } from \"./hotkeys\";\nimport { HotkeyScope, HotkeysEvents } from \"./hotkeysEvents\";\n\nexport interface IHotkeysTarget extends React.Component<any, any>, React.ComponentLifecycle<any, any> {\n    /** @internal */\n    globalHotkeysEvents?: HotkeysEvents;\n\n    /** @internal */\n    localHotkeysEvents?: HotkeysEvents;\n\n    /**\n     * Components decorated with the `HotkeysTarget` decorator must implement\n     * this method, and it must return a `Hotkeys` React element.\n     */\n    renderHotkeys(): React.ReactElement<IHotkeysProps>;\n}\n\nexport function HotkeysTarget<T extends { prototype: IHotkeysTarget }>(constructor: T) {\n    const {\n        componentWillMount,\n        componentDidMount,\n        componentWillUnmount,\n        render,\n        renderHotkeys,\n    } = constructor.prototype;\n\n    if (!isFunction(renderHotkeys)) {\n        throw new Error(`@HotkeysTarget-decorated class must implement \\`renderHotkeys\\`. ${constructor}`);\n    }\n\n    // tslint:disable no-invalid-this only-arrow-functions\n    constructor.prototype.componentWillMount = function() {\n        this.localHotkeysEvents = new HotkeysEvents(HotkeyScope.LOCAL);\n        this.globalHotkeysEvents = new HotkeysEvents(HotkeyScope.GLOBAL);\n\n        if (componentWillMount != null) {\n            componentWillMount.call(this);\n        }\n    };\n\n    constructor.prototype.componentDidMount = function() {\n        // attach global key event listeners\n        document.addEventListener(\"keydown\", this.globalHotkeysEvents.handleKeyDown);\n        document.addEventListener(\"keyup\", this.globalHotkeysEvents.handleKeyUp);\n\n        if (componentDidMount != null) {\n            componentDidMount.call(this);\n        }\n    };\n\n    constructor.prototype.componentWillUnmount = function() {\n        // detach global key event listeners\n        document.removeEventListener(\"keydown\", this.globalHotkeysEvents.handleKeyDown);\n        document.removeEventListener(\"keyup\", this.globalHotkeysEvents.handleKeyUp);\n\n        this.globalHotkeysEvents.clear();\n        this.localHotkeysEvents.clear();\n\n        if (componentWillUnmount != null) {\n            componentWillUnmount.call(this);\n        }\n    };\n\n    constructor.prototype.render = function() {\n        const element = render.call(this) as JSX.Element;\n\n        const hotkeys = renderHotkeys.call(this);\n        this.localHotkeysEvents.setHotkeys(hotkeys.props);\n        this.globalHotkeysEvents.setHotkeys(hotkeys.props);\n\n        // attach local key event listeners\n        if (element != null && this.localHotkeysEvents.count() > 0) {\n            const tabIndex = hotkeys.props.tabIndex === undefined ? 0 : hotkeys.props.tabIndex;\n\n            const existingKeyDown = element.props.onKeyDown as React.KeyboardEventHandler<HTMLElement>;\n            const onKeyDown = (e: React.KeyboardEvent<HTMLElement>) => {\n                this.localHotkeysEvents.handleKeyDown(e.nativeEvent as KeyboardEvent);\n                safeInvoke(existingKeyDown, e);\n            };\n\n            const existingKeyUp = element.props.onKeyUp as React.KeyboardEventHandler<HTMLElement>;\n            const onKeyUp = (e: React.KeyboardEvent<HTMLElement>) => {\n                this.localHotkeysEvents.handleKeyUp(e.nativeEvent as KeyboardEvent);\n                safeInvoke(existingKeyUp, e);\n            };\n            return React.cloneElement(element, { tabIndex, onKeyDown, onKeyUp });\n        } else {\n            return element;\n        }\n    };\n    // tslint:enable\n};\n"]}