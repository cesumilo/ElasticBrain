{"version":3,"sources":["../src/components/hotkeys/keyCombo.tsx"],"names":[],"mappings":"AAAA;;;;;GAKG;;;AAEH,6BAA+B;AAC/B,+CAAmD;AAEnD,IAAM,QAAQ,GAAG;IACb,GAAG,EAAE,oBAAoB;IACzB,IAAI,EAAE,qBAAqB;IAC3B,MAAM,EAAE,oBAAoB;IAC5B,IAAI,EAAE,oBAAoB;IAC1B,KAAK,EAAE,mBAAmB;IAC1B,IAAI,EAAE,oBAAoB;IAC1B,IAAI,EAAE,qBAAqB;IAC3B,KAAK,EAAE,qBAAqB;IAC5B,KAAK,EAAE,mBAAmB;IAC1B,EAAE,EAAE,kBAAkB;CACE,CAAC;AAM7B;IAA8B,oCAAmC;IAAjE;;IAuBA,CAAC;IAtBU,yBAAM,GAAb;QACI,IAAM,IAAI,GAAG,gCAAiB,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QACjD,IAAM,UAAU,GAAG,EAAmB,CAAC;QACvC,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;YACnC,IAAI,GAAG,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;YAClB,IAAM,IAAI,GAAG,QAAQ,CAAC,GAAG,CAAC,CAAC;YAC3B,EAAE,CAAC,CAAC,IAAI,IAAI,IAAI,CAAC,CAAC,CAAC;gBACf,UAAU,CAAC,IAAI,CACX,6BAAK,SAAS,EAAC,wBAAwB,EAAC,GAAG,EAAE,SAAO,CAAG;oBACnD,8BAAM,SAAS,EAAE,sBAAoB,IAAM,GAAI;oBAC9C,GAAG,CACF,CACT,CAAC;YACN,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,EAAE,CAAC,CAAC,GAAG,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC;oBACnB,GAAG,GAAG,GAAG,CAAC,WAAW,EAAE,CAAC;gBAC5B,CAAC;gBACD,UAAU,CAAC,IAAI,CAAC,6BAAK,SAAS,EAAC,QAAQ,EAAC,GAAG,EAAE,SAAO,CAAG,IAAG,GAAG,CAAO,CAAC,CAAC;YAC1E,CAAC;QACL,CAAC;QACD,MAAM,CAAC,6BAAK,SAAS,EAAC,cAAc,IAAE,UAAU,CAAO,CAAC;IAC5D,CAAC;IACL,eAAC;AAAD,CAvBA,AAuBC,CAvB6B,KAAK,CAAC,SAAS,GAuB5C;AAvBY,4BAAQ","file":"components/hotkeys/keyCombo.js","sourcesContent":["/**\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n * Licensed under the BSD-3 License as modified (the “License”); you may obtain a copy\n * of the license at https://github.com/palantir/blueprint/blob/master/LICENSE\n * and https://github.com/palantir/blueprint/blob/master/PATENTS\n */\n\nimport * as React from \"react\";\nimport { normalizeKeyCombo } from \"./hotkeyParser\";\n\nconst KeyIcons = {\n    alt: \"pt-icon-key-option\",\n    ctrl: \"pt-icon-key-control\",\n    delete: \"pt-icon-key-delete\",\n    down: \"pt-icon-arrow-down\",\n    enter: \"pt-icon-key-enter\",\n    left: \"pt-icon-arrow-left\",\n    meta: \"pt-icon-key-command\",\n    right: \"pt-icon-arrow-right\",\n    shift: \"pt-icon-key-shift\",\n    up: \"pt-icon-arrow-up\",\n} as {[key: string]: string};\n\nexport interface IKeyComboProps {\n    combo: string;\n}\n\nexport class KeyCombo extends React.Component<IKeyComboProps, {}> {\n    public render() {\n        const keys = normalizeKeyCombo(this.props.combo);\n        const components = [] as JSX.Element[];\n        for (let i = 0; i < keys.length; i++) {\n            let key = keys[i];\n            const icon = KeyIcons[key];\n            if (icon != null) {\n                components.push(\n                    <kbd className=\"pt-key pt-modifier-key\" key={`key-${i}`}>\n                        <span className={`pt-icon-standard ${icon}`} />\n                        {key}\n                    </kbd>,\n                );\n            } else {\n                if (key.length === 1) {\n                    key = key.toUpperCase();\n                }\n                components.push(<kbd className=\"pt-key\" key={`key-${i}`}>{key}</kbd>);\n            }\n        }\n        return <div className=\"pt-key-combo\">{components}</div>;\n    }\n}\n"]}