{"version":3,"sources":["../src/components/hotkeys/hotkeyParser.ts"],"names":[],"mappings":"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","file":"components/hotkeys/hotkeyParser.js","sourcesContent":["/*\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n * Licensed under the BSD-3 License as modified (the “License”); you may obtain a copy\n * of the license at https://github.com/palantir/blueprint/blob/master/LICENSE\n * and https://github.com/palantir/blueprint/blob/master/PATENTS\n */\n\nexport interface IKeyCodeTable {\n    [code: number]: string;\n}\n\nexport interface IKeyCodeReverseTable {\n    [key: string]: number;\n}\n\nexport interface IKeyMap {\n    [key: string]: string;\n}\n\nexport const KeyCodes = {\n    8: \"backspace\",\n    9: \"tab\",\n    13: \"enter\",\n    20: \"capslock\",\n    27: \"esc\",\n    32: \"space\",\n    33: \"pageup\",\n    34: \"pagedown\",\n    35: \"end\",\n    36: \"home\",\n    37: \"left\",\n    38: \"up\",\n    39: \"right\",\n    40: \"down\",\n    45: \"ins\",\n    46: \"del\",\n    // number keys\n    48 : \"0\",\n    49 : \"1\",\n    50 : \"2\",\n    51 : \"3\",\n    52 : \"4\",\n    53 : \"5\",\n    54 : \"6\",\n    55 : \"7\",\n    56 : \"8\",\n    57 : \"9\",\n    // alphabet\n    65 : \"a\",\n    66 : \"b\",\n    67 : \"c\",\n    68 : \"d\",\n    69 : \"e\",\n    70 : \"f\",\n    71 : \"g\",\n    72 : \"h\",\n    73 : \"i\",\n    74 : \"j\",\n    75 : \"k\",\n    76 : \"l\",\n    77 : \"m\",\n    78 : \"n\",\n    79 : \"o\",\n    80 : \"p\",\n    81 : \"q\",\n    82 : \"r\",\n    83 : \"s\",\n    84 : \"t\",\n    85 : \"u\",\n    86 : \"v\",\n    87 : \"w\",\n    88 : \"x\",\n    89 : \"y\",\n    90 : \"z\",\n    // punctuation\n    106: \"*\",\n    107: \"+\",\n    109: \"-\",\n    110: \".\",\n    111: \"/\",\n    186: \";\",\n    187: \"=\",\n    188: \",\",\n    189: \"-\",\n    190: \".\",\n    191: \"/\",\n    192: \"`\",\n    219: \"[\",\n    220: \"\\\\\",\n    221: \"]\",\n    222: \"\\'\",\n} as IKeyCodeTable;\n\nexport const Modifiers = {\n    16: \"shift\",\n    17: \"ctrl\",\n    18: \"alt\",\n    91: \"meta\",\n    93: \"meta\",\n    224: \"meta\",\n} as IKeyCodeTable;\n\nexport const ModifierBitMasks = {\n    alt: 1,\n    ctrl: 2,\n    meta: 4,\n    shift: 8,\n} as IKeyCodeReverseTable;\n\nexport const Aliases = {\n    cmd: \"meta\",\n    command: \"meta\",\n    escape: \"esc\",\n    minus: \"-\",\n    mod: ((typeof navigator !== \"undefined\") && /Mac|iPod|iPhone|iPad/.test(navigator.platform)) ? \"meta\" : \"ctrl\",\n    option: \"alt\",\n    plus: \"+\",\n    return: \"enter\",\n    win: \"meta\",\n} as IKeyMap;\n\n// alph sorting is unintuitive here\n// tslint:disable object-literal-sort-keys\nexport const ShiftKeys = {\n    \"~\": \"`\",\n    \"!\": \"1\",\n    \"@\": \"2\",\n    \"#\": \"3\",\n    \"$\": \"4\",\n    \"%\": \"5\",\n    \"^\": \"6\",\n    \"&\": \"7\",\n    \"*\": \"8\",\n    \"(\": \"9\",\n    \")\": \"0\",\n    \"_\": \"-\",\n    \"+\": \"=\",\n    \"{\": \"[\",\n    \"}\": \"]\",\n    \"|\": \"\\\\\",\n    \":\": \";\",\n    \"\\\"\": \"\\'\",\n    \"<\": \",\",\n    \">\": \".\",\n    \"?\": \"/\",\n} as IKeyMap;\n// tslint:enable object-literal-sort-keys\n\n/* tslint:enable:object-literal-key-quotes */\n\n// Function keys\nfor (let i = 1; i <= 12; ++i) {\n    KeyCodes[111 + i] = \"f\" + i;\n}\n\n// Numpad\nfor (let i = 0; i <= 9; ++i) {\n    KeyCodes[96 + i] = \"num\" + i.toString();\n}\n\nexport interface IKeyCombo {\n    key?: string;\n    modifiers: number;\n}\n\nexport function comboMatches(a: IKeyCombo, b: IKeyCombo) {\n    return a.modifiers === b.modifiers && a.key === b.key;\n}\n\n/**\n * Converts a key combo string into a key combo object. Key combos include\n * zero or more modifier keys, such as `shift` or `alt`, and exactly one\n * action key, such as `A`, `enter`, or `left`.\n *\n * For action keys that require a shift, e.g. `@` or `|`, we inlude the\n * necessary `shift` modifier and automatically convert the action key to the\n * unshifted version. For example, `@` is equivalent to `shift+2`.\n */\nexport const parseKeyCombo = (combo: string): IKeyCombo => {\n    const pieces = combo.replace(/\\s/g, \"\").toLowerCase().split(\"+\");\n    let modifiers = 0;\n    let key = null as string;\n    for (let piece of pieces) {\n        if (piece === \"\") {\n            throw new Error(`Failed to parse key combo \"${combo}\".\n                Valid key combos look like \"cmd + plus\", \"shift+p\", or \"!\"`);\n        }\n\n        if (Aliases[piece] != null) {\n            piece = Aliases[piece];\n        }\n\n        if (ModifierBitMasks[piece] != null) {\n            modifiers += ModifierBitMasks[piece];\n        } else if (ShiftKeys[piece] != null) {\n            // tslint:disable-next-line no-string-literal\n            modifiers += ModifierBitMasks[\"shift\"];\n            key = ShiftKeys[piece];\n        } else {\n            key = piece.toLowerCase();\n        }\n    }\n    return { modifiers, key };\n};\n\n/**\n * PhantomJS's webkit totally messes up keyboard events, so we have do this\n * fancy little dance with the event data to determine which key was pressed\n * for unit tests.\n */\nconst normalizeKeyCode = (e: KeyboardEvent) => {\n    return (e.which === 0 && e.key != null) ? e.key.charCodeAt(0) : e.which;\n};\n\n/**\n * Converts a keyboard event into a valid combo prop string\n */\nexport const getKeyComboString = (e: KeyboardEvent): string => {\n    const keys = [] as string[];\n\n    // modifiers first\n    if (e.ctrlKey) { keys.push(\"ctrl\"); }\n    if (e.altKey) { keys.push(\"alt\"); }\n    if (e.shiftKey) { keys.push(\"shift\"); }\n    if (e.metaKey) { keys.push(\"meta\"); }\n\n    const which = normalizeKeyCode(e);\n    if (Modifiers[which] != null) {\n        // no action key\n    } else if (KeyCodes[which] != null) {\n        keys.push(KeyCodes[which]);\n    } else {\n        keys.push(String.fromCharCode(which).toLowerCase());\n    }\n\n    // join keys with plusses\n    return keys.join(\" + \");\n};\n\n/**\n * Determines the key combo object from the given keyboard event. Again, a key\n * combo includes zero or more modifiers (represented by a bitmask) and one\n * action key, which we determine from the `e.which` property of the keyboard\n * event.\n */\nexport const getKeyCombo = (e: KeyboardEvent): IKeyCombo => {\n    let key = null as string;\n    const which = normalizeKeyCode(e);\n    if (Modifiers[which] != null) {\n        // keep key null\n    } else if (KeyCodes[which] != null) {\n        key = KeyCodes[which];\n    } else {\n        key = String.fromCharCode(which).toLowerCase();\n    }\n\n    let modifiers = 0;\n    // tslint:disable no-string-literal\n    if (e.altKey) { modifiers += ModifierBitMasks[\"alt\"]; }\n    if (e.ctrlKey) { modifiers += ModifierBitMasks[\"ctrl\"]; }\n    if (e.metaKey) { modifiers += ModifierBitMasks[\"meta\"]; }\n    if (e.shiftKey) { modifiers += ModifierBitMasks[\"shift\"]; }\n    // tslint:enable\n\n    return { modifiers, key };\n};\n\n/**\n * Splits a key combo string into its constituent key values and looks up\n * aliases, such as `return` -> `enter`.\n *\n * Unlike the parseKeyCombo method, this method does NOT convert shifted\n * action keys. So `\"@\"` will NOT be converted to `[\"shift\", \"2\"]`).\n */\nexport const normalizeKeyCombo = (combo: string): string[] => {\n    const keys = combo.replace(/\\s/g, \"\").split(\"+\");\n    return keys.map((key) => Aliases[key] != null ? Aliases[key] : key);\n};\n/* tslint:enable:no-string-literal */\n"]}